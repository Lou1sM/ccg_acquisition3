{"np_list": ["delaware", "scotts_valley", "detroit", "oklahoma", "maine", "california", "new_hampshire", "flint", "wyoming", "indianapolis", "new_orleans", "kansas", "miami", "denver", "arkansas", "massachusetts", "portland", "nevada", "spokane", "louisiana", "potomac", "montgomery", "pennsylvania", "minnesota", "durham", "mount_whitney", "baton_rouge", "missouri", "riverside", "vermont", "washington", "hawaii", "new_mexico", "seattle", "chattahoochee", "atlanta", "san_jose", "utah", "san_diego", "boston", "des_moines", "san_antonio", "west_virginia", "iowa", "columbus", "georgia", "death_valley", "mount_mckinley", "kalamazoo", "nebraska", "illinois", "virginia", "wisconsin", "texas", "north_carolina", "guadalupe_peak", "arizona", "erie", "tempe", "montana", "oregon", "south_carolina", "tucson", "houston", "plano", "springfield", "north_platte", "colorado", "fort_wayne", "salt_lake_city", "austin", "usa", "chicago", "salem", "indiana", "red", "idaho", "dover", "kentucky", "florida", "rhode_island", "new_jersey", "albany", "ohio", "sacramento", "rio_grande", "maryland", "san_francisco", "boulder", "minneapolis", "michigan", "dallas", "mississippi", "pittsburgh", "north_dakota", "alaska", "south_dakota", "new_york", "rochester", "tennessee", "alabama"], "intransitive_verbs": ["capital", "place", "major", "lake", "city", "state", "river", "mountain"], "transitive_verbs": ["population", "low_point", "longer", "area", "higher", "capital", "lower", "high_point", "size", "elevation", "next_to", "density", "traverse", "loc", "len"], "data": [{"words": ["give", "me", "the", "cities", "in", "virginia"], "parse": "lambda $0.AND (city $0) (loc $0 virginia)", "parse_with_commas": "lambda $0.(city($0),loc($0,virginia))"}, {"words": ["what", "are", "the", "high", "points", "of", "states", "surrounding", "mississippi", "?"], "parse": "lambda $0.AND (high_point $1 $0) (loc $0 $1) (next_to $1 mississippi) (state $1)", "parse_with_commas": "lambda $0.(high_point($1,$0),loc($0,$1),state($1),next_to($1,mississippi))"}, {"words": ["name", "the", "rivers", "in", "arkansas"], "parse": "lambda $0.AND (loc $0 arkansas) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,arkansas))"}, {"words": ["name", "all", "the", "rivers", "in", "colorado"], "parse": "lambda $0.AND (loc $0 colorado) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,colorado))"}, {"words": ["can", "you", "tell", "me", "the", "capital", "of", "texas", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 texas)", "parse_with_commas": "lambda $0.(capital($0),loc($0,texas))"}, {"words": ["could", "you", "tell", "me", "what", "is", "the", "highest", "point", "in", "the", "state", "of", "oregon", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 oregon) (place $0) (state oregon))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,oregon),state(oregon)))"}, {"words": ["count", "the", "states", "which", "have", "elevations", "lower", "than", "what", "alabama", "has", "?"], "parse": "lambda $0.count $1 (AND (loc $2 $1) (loc $3 alabama) (low_point $1 $2) (low_point alabama $3) (lower $2 $3) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($2,$1),low_point($1,$2),lower($2,$3),low_point(alabama,$3),loc($3,alabama)),$0)"}, {"words": ["give", "me", "all", "the", "states", "of", "usa", "?"], "parse": "lambda $0.AND (loc $0 usa) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($0,usa))"}, {"words": ["give", "me", "the", "cities", "in", "texas", "?"], "parse": "lambda $0.AND (city $0) (loc $0 texas)", "parse_with_commas": "lambda $0.(city($0),loc($0,texas))"}, {"words": ["give", "me", "the", "cities", "in", "usa", "?"], "parse": "lambda $0.AND (city $0) (loc $0 usa)", "parse_with_commas": "lambda $0.(city($0),loc($0,usa))"}, {"words": ["give", "me", "the", "cities", "in", "virginia", "?"], "parse": "lambda $0.AND (city $0) (loc $0 virginia)", "parse_with_commas": "lambda $0.(city($0),loc($0,virginia))"}, {"words": ["give", "me", "the", "cities", "which", "are", "in", "texas", "?"], "parse": "lambda $0.AND (city $0) (loc $0 texas)", "parse_with_commas": "lambda $0.(city($0),loc($0,texas))"}, {"words": ["give", "me", "the", "lakes", "in", "california", "?"], "parse": "lambda $0.AND (lake $0) (loc $0 california)", "parse_with_commas": "lambda $0.(lake($0),loc($0,california))"}, {"words": ["give", "me", "the", "largest", "state", "?"], "parse": "lambda $0.largest $0 (state $0)", "parse_with_commas": "lambda $0.largest($0,state($0))"}, {"words": ["give", "me", "the", "longest", "river", "that", "passes", "through", "the", "us", "?"], "parse": "lambda $0.longest $0 (AND (river $0) (traverse $0 usa))", "parse_with_commas": "lambda $0.longest($0,(river($0),traverse($0,usa)))"}, {"words": ["give", "me", "the", "number", "of", "rivers", "in", "california", "?"], "parse": "lambda $0.count $1 (AND (loc $1 california) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,california)),$0)"}, {"words": ["give", "me", "the", "states", "that", "border", "utah", "?"], "parse": "lambda $0.AND (next_to $0 utah) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,utah))"}, {"words": ["how", "big", "is", "alaska", "?"], "parse": "lambda $0.size alaska $0", "parse_with_commas": "lambda $0.size(alaska,$0)"}, {"words": ["how", "big", "is", "massachusetts", "?"], "parse": "lambda $0.size massachusetts $0", "parse_with_commas": "lambda $0.size(massachusetts,$0)"}, {"words": ["how", "big", "is", "new", "mexico", "?"], "parse": "lambda $0.size new_mexico $0", "parse_with_commas": "lambda $0.size(new_mexico,$0)"}, {"words": ["how", "big", "is", "north", "dakota", "?"], "parse": "lambda $0.size north_dakota $0", "parse_with_commas": "lambda $0.size(north_dakota,$0)"}, {"words": ["how", "big", "is", "texas", "?"], "parse": "lambda $0.size texas $0", "parse_with_commas": "lambda $0.size(texas,$0)"}, {"words": ["how", "big", "is", "the", "city", "of", "new", "york", "?"], "parse": "lambda $0.size new_york $0", "parse_with_commas": "lambda $0.size(new_york,$0)"}, {"words": ["how", "high", "are", "the", "highest", "points", "of", "all", "the", "states", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 $2) (place $1) (state $2)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,$2),state($2))))"}, {"words": ["how", "high", "is", "guadalupe", "peak", "?"], "parse": "lambda $0.elevation guadalupe_peak $0", "parse_with_commas": "lambda $0.elevation(guadalupe_peak,$0)"}, {"words": ["how", "high", "is", "mount", "mckinley", "?"], "parse": "lambda $0.elevation mount_mckinley $0", "parse_with_commas": "lambda $0.elevation(mount_mckinley,$0)"}, {"words": ["how", "high", "is", "the", "highest", "point", "in", "america", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 usa) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,usa))))"}, {"words": ["how", "high", "is", "the", "highest", "point", "in", "montana", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 montana) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,montana))))"}, {"words": ["how", "high", "is", "the", "highest", "point", "in", "the", "largest", "state", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (largest $2 (state $2)) (loc $1 $2) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,$2),largest($2,state($2)))))"}, {"words": ["how", "high", "is", "the", "highest", "point", "of", "alabama", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 alabama) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,alabama))))"}, {"words": ["how", "high", "is", "the", "highest", "point", "of", "delaware", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 delaware) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,delaware))))"}, {"words": ["how", "high", "is", "the", "highest", "point", "of", "florida", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 florida) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,florida))))"}, {"words": ["how", "high", "is", "the", "highest", "point", "of", "louisiana", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 louisiana) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,louisiana))))"}, {"words": ["how", "large", "is", "alaska", "?"], "parse": "lambda $0.size alaska $0", "parse_with_commas": "lambda $0.size(alaska,$0)"}, {"words": ["how", "large", "is", "texas", "?"], "parse": "lambda $0.size texas $0", "parse_with_commas": "lambda $0.size(texas,$0)"}, {"words": ["how", "large", "is", "the", "largest", "city", "in", "alaska", "?"], "parse": "lambda $0.AND (largest $1 (AND (city $1) (loc $1 alaska))) (size $1 $0)", "parse_with_commas": "lambda $0.(size($1,$0),largest($1,(city($1),loc($1,alaska))))"}, {"words": ["how", "long", "is", "rio", "grande", "?"], "parse": "lambda $0.len rio_grande $0", "parse_with_commas": "lambda $0.len(rio_grande,$0)"}, {"words": ["how", "long", "is", "the", "colorado", "river", "?"], "parse": "lambda $0.AND (len colorado $0) (river colorado)", "parse_with_commas": "lambda $0.(len(colorado,$0),river(colorado))"}, {"words": ["how", "long", "is", "the", "delaware", "river", "?"], "parse": "lambda $0.AND (len delaware $0) (river delaware)", "parse_with_commas": "lambda $0.(len(delaware,$0),river(delaware))"}, {"words": ["how", "long", "is", "the", "longest", "river", "in", "california", "?"], "parse": "lambda $0.AND (len $1 $0) (longest $1 (AND (loc $1 california) (river $1)))", "parse_with_commas": "lambda $0.(len($1,$0),longest($1,(river($1),loc($1,california))))"}, {"words": ["how", "long", "is", "the", "longest", "river", "in", "the", "usa", "?"], "parse": "lambda $0.AND (len $1 $0) (longest $1 (AND (loc $1 usa) (river $1)))", "parse_with_commas": "lambda $0.(len($1,$0),longest($1,(river($1),loc($1,usa))))"}, {"words": ["how", "long", "is", "the", "mississippi", "?"], "parse": "lambda $0.len mississippi $0", "parse_with_commas": "lambda $0.len(mississippi,$0)"}, {"words": ["how", "long", "is", "the", "mississippi", "river", "?"], "parse": "lambda $0.AND (len mississippi $0) (river mississippi)", "parse_with_commas": "lambda $0.(len(mississippi,$0),river(mississippi))"}, {"words": ["how", "long", "is", "the", "mississippi", "river", "in", "miles", "?"], "parse": "lambda $0.AND (len mississippi $0) (river mississippi)", "parse_with_commas": "lambda $0.(len(mississippi,$0),river(mississippi))"}, {"words": ["how", "long", "is", "the", "missouri", "river", "?"], "parse": "lambda $0.AND (len missouri $0) (river missouri)", "parse_with_commas": "lambda $0.(len(missouri,$0),river(missouri))"}, {"words": ["how", "long", "is", "the", "north", "platte", "river", "?"], "parse": "lambda $0.AND (len north_platte $0) (river north_platte)", "parse_with_commas": "lambda $0.(len(north_platte,$0),river(north_platte))"}, {"words": ["how", "long", "is", "the", "ohio", "river", "?"], "parse": "lambda $0.AND (len ohio $0) (river ohio)", "parse_with_commas": "lambda $0.(len(ohio,$0),river(ohio))"}, {"words": ["how", "long", "is", "the", "rio", "grande", "river", "?"], "parse": "lambda $0.AND (len rio_grande $0) (river rio_grande)", "parse_with_commas": "lambda $0.(len(rio_grande,$0),river(rio_grande))"}, {"words": ["how", "long", "is", "the", "shortest", "river", "in", "the", "usa", "?"], "parse": "lambda $0.AND (len $1 $0) (shortest $1 (AND (loc $1 usa) (river $1)))", "parse_with_commas": "lambda $0.(len($1,$0),shortest($1,(river($1),loc($1,usa))))"}, {"words": ["how", "many", "big", "cities", "are", "in", "pennsylvania", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 pennsylvania) (major $1)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,pennsylvania)),$0)"}, {"words": ["how", "many", "capitals", "does", "rhode", "island", "have", "?"], "parse": "lambda $0.count $1 (AND (capital $1) (loc $1 rhode_island)) $0", "parse_with_commas": "lambda $0.count($1,(capital($1),loc($1,rhode_island)),$0)"}, {"words": ["how", "many", "cities", "are", "in", "louisiana", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 louisiana)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,louisiana)),$0)"}, {"words": ["how", "many", "cities", "are", "in", "montana", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 montana)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,montana)),$0)"}, {"words": ["how", "many", "cities", "are", "there", "in", "the", "united", "states", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 usa)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "cities", "are", "there", "in", "the", "us", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 usa)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "cities", "are", "there", "in", "us", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 usa)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "cities", "are", "there", "in", "usa", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 usa)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "cities", "does", "texas", "have", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 texas)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,texas)),$0)"}, {"words": ["how", "many", "cities", "does", "the", "usa", "have", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 usa)) $0", "parse_with_commas": "lambda $0.count($1,(city($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "cities", "named", "austin", "are", "there", "in", "the", "usa", "?"], "parse": "lambda $0.count austin (AND (city austin) (loc austin usa)) $0", "parse_with_commas": "lambda $0.count(austin,(city(austin),loc(austin,usa)),$0)"}, {"words": ["how", "many", "citizens", "does", "the", "biggest", "city", "have", "in", "the", "usa", "?"], "parse": "lambda $0.AND (largest $1 (city $1)) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($1,city($1)))"}, {"words": ["how", "many", "citizens", "in", "alabama", "?"], "parse": "lambda $0.population alabama $0", "parse_with_commas": "lambda $0.population(alabama,$0)"}, {"words": ["how", "many", "citizens", "in", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["how", "many", "citizens", "live", "in", "california", "?"], "parse": "lambda $0.population california $0", "parse_with_commas": "lambda $0.population(california,$0)"}, {"words": ["how", "many", "colorado", "rivers", "are", "there", "?"], "parse": "lambda $0.count colorado (AND (river colorado)) $0", "parse_with_commas": "lambda $0.count(colorado,(river(colorado)),$0)"}, {"words": ["how", "many", "inhabitants", "does", "montgomery", "have", "?"], "parse": "lambda $0.population montgomery $0", "parse_with_commas": "lambda $0.population(montgomery,$0)"}, {"words": ["how", "many", "major", "cities", "are", "in", "arizona", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 arizona) (major $1)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,arizona)),$0)"}, {"words": ["how", "many", "major", "cities", "are", "in", "florida", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 florida) (major $1)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,florida)),$0)"}, {"words": ["how", "many", "major", "cities", "are", "in", "states", "bordering", "nebraska", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 $2) (major $1) (next_to $2 nebraska) (state $2)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,$2),state($2),next_to($2,nebraska)),$0)"}, {"words": ["how", "many", "major", "cities", "are", "in", "states", "bordering", "utah", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 $2) (major $1) (next_to $2 utah) (state $2)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,$2),state($2),next_to($2,utah)),$0)"}, {"words": ["how", "many", "major", "cities", "are", "in", "texas", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 texas) (major $1)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,texas)),$0)"}, {"words": ["how", "many", "major", "cities", "are", "there", "?"], "parse": "lambda $0.count $1 (AND (city $1) (major $1)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1)),$0)"}, {"words": ["how", "many", "major", "cities", "are", "there", "in", "oregon", "?"], "parse": "lambda $0.count $1 (AND (city $1) (loc $1 oregon) (major $1)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),city($1),loc($1,oregon)),$0)"}, {"words": ["how", "many", "major", "rivers", "cross", "ohio", "?"], "parse": "lambda $0.count $1 (AND (major $1) (river $1) (traverse $1 ohio)) $0", "parse_with_commas": "lambda $0.count($1,(major($1),river($1),traverse($1,ohio)),$0)"}, {"words": ["how", "many", "people", "are", "in", "the", "state", "of", "nevada", "?"], "parse": "lambda $0.population nevada $0", "parse_with_commas": "lambda $0.population(nevada,$0)"}, {"words": ["how", "many", "people", "are", "there", "in", "iowa", "?"], "parse": "lambda $0.population iowa $0", "parse_with_commas": "lambda $0.population(iowa,$0)"}, {"words": ["how", "many", "people", "are", "there", "in", "new", "york", "?"], "parse": "lambda $0.population new_york $0", "parse_with_commas": "lambda $0.population(new_york,$0)"}, {"words": ["how", "many", "people", "in", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["how", "many", "people", "live", "in", "austin", "?"], "parse": "lambda $0.population austin $0", "parse_with_commas": "lambda $0.population(austin,$0)"}, {"words": ["how", "many", "people", "live", "in", "austin", "texas", "?"], "parse": "lambda $0.population austin $0", "parse_with_commas": "lambda $0.population(austin,$0)"}, {"words": ["how", "many", "people", "live", "in", "california", "?"], "parse": "lambda $0.population california $0", "parse_with_commas": "lambda $0.population(california,$0)"}, {"words": ["how", "many", "people", "live", "in", "chicago", "?"], "parse": "lambda $0.population chicago $0", "parse_with_commas": "lambda $0.population(chicago,$0)"}, {"words": ["how", "many", "people", "live", "in", "detroit", "?"], "parse": "lambda $0.population detroit $0", "parse_with_commas": "lambda $0.population(detroit,$0)"}, {"words": ["how", "many", "people", "live", "in", "hawaii", "?"], "parse": "lambda $0.population hawaii $0", "parse_with_commas": "lambda $0.population(hawaii,$0)"}, {"words": ["how", "many", "people", "live", "in", "houston", "?"], "parse": "lambda $0.population houston $0", "parse_with_commas": "lambda $0.population(houston,$0)"}, {"words": ["how", "many", "people", "live", "in", "kalamazoo", "?"], "parse": "lambda $0.population kalamazoo $0", "parse_with_commas": "lambda $0.population(kalamazoo,$0)"}, {"words": ["how", "many", "people", "live", "in", "kansas", "?"], "parse": "lambda $0.population kansas $0", "parse_with_commas": "lambda $0.population(kansas,$0)"}, {"words": ["how", "many", "people", "live", "in", "minneapolis", "minnesota", "?"], "parse": "lambda $0.population minneapolis $0", "parse_with_commas": "lambda $0.population(minneapolis,$0)"}, {"words": ["how", "many", "people", "live", "in", "mississippi", "?"], "parse": "lambda $0.population mississippi $0", "parse_with_commas": "lambda $0.population(mississippi,$0)"}, {"words": ["how", "many", "people", "live", "in", "montana", "?"], "parse": "lambda $0.population montana $0", "parse_with_commas": "lambda $0.population(montana,$0)"}, {"words": ["how", "many", "people", "live", "in", "new", "hampshire", "?"], "parse": "lambda $0.population new_hampshire $0", "parse_with_commas": "lambda $0.population(new_hampshire,$0)"}, {"words": ["how", "many", "people", "live", "in", "new", "mexico", "?"], "parse": "lambda $0.population new_mexico $0", "parse_with_commas": "lambda $0.population(new_mexico,$0)"}, {"words": ["how", "many", "people", "live", "in", "new", "york", "?"], "parse": "lambda $0.population new_york $0", "parse_with_commas": "lambda $0.population(new_york,$0)"}, {"words": ["how", "many", "people", "live", "in", "rhode", "island", "?"], "parse": "lambda $0.population rhode_island $0", "parse_with_commas": "lambda $0.population(rhode_island,$0)"}, {"words": ["how", "many", "people", "live", "in", "riverside", "?"], "parse": "lambda $0.population riverside $0", "parse_with_commas": "lambda $0.population(riverside,$0)"}, {"words": ["how", "many", "people", "live", "in", "san", "francisco", "?"], "parse": "lambda $0.population san_francisco $0", "parse_with_commas": "lambda $0.population(san_francisco,$0)"}, {"words": ["how", "many", "people", "live", "in", "south", "dakota", "?"], "parse": "lambda $0.population south_dakota $0", "parse_with_commas": "lambda $0.population(south_dakota,$0)"}, {"words": ["how", "many", "people", "live", "in", "spokane", "washington", "?"], "parse": "lambda $0.population spokane $0", "parse_with_commas": "lambda $0.population(spokane,$0)"}, {"words": ["how", "many", "people", "live", "in", "texas", "?"], "parse": "lambda $0.population texas $0", "parse_with_commas": "lambda $0.population(texas,$0)"}, {"words": ["how", "many", "people", "live", "in", "the", "biggest", "city", "in", "new", "york", "state", "?"], "parse": "lambda $0.AND (largest $1 (AND (city $1) (loc $1 new_york) (state new_york))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($1,(city($1),loc($1,new_york),state(new_york))))"}, {"words": ["how", "many", "people", "live", "in", "the", "capital", "of", "georgia", "?"], "parse": "lambda $0.AND (capital $1) (loc $1 georgia) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),capital($1),loc($1,georgia))"}, {"words": ["how", "many", "people", "live", "in", "the", "capital", "of", "texas", "?"], "parse": "lambda $0.AND (capital $1) (loc $1 texas) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),capital($1),loc($1,texas))"}, {"words": ["how", "many", "people", "live", "in", "the", "smallest", "state", "bordering", "wyoming", "?"], "parse": "lambda $0.AND (population $1 $0) (smallest $1 (AND (next_to $1 wyoming) (state $1)))", "parse_with_commas": "lambda $0.(population($1,$0),smallest($1,(state($1),next_to($1,wyoming))))"}, {"words": ["how", "many", "people", "live", "in", "the", "state", "with", "the", "largest", "population", "density", "?"], "parse": "lambda $0.AND (largest $2 (AND (density $1 $2) (state $1))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($2,(state($1),density($1,$2))))"}, {"words": ["how", "many", "people", "live", "in", "the", "united", "states", "?"], "parse": "lambda $0.population usa $0", "parse_with_commas": "lambda $0.population(usa,$0)"}, {"words": ["how", "many", "people", "live", "in", "washington", "?"], "parse": "lambda $0.population washington $0", "parse_with_commas": "lambda $0.population(washington,$0)"}, {"words": ["how", "many", "people", "live", "in", "washington", "dc", "?"], "parse": "lambda $0.population washington $0", "parse_with_commas": "lambda $0.population(washington,$0)"}, {"words": ["how", "many", "people", "lived", "in", "austin", "?"], "parse": "lambda $0.population austin $0", "parse_with_commas": "lambda $0.population(austin,$0)"}, {"words": ["how", "many", "people", "reside", "in", "utah", "?"], "parse": "lambda $0.population utah $0", "parse_with_commas": "lambda $0.population(utah,$0)"}, {"words": ["how", "many", "people", "stay", "in", "utah", "?"], "parse": "lambda $0.population utah $0", "parse_with_commas": "lambda $0.population(utah,$0)"}, {"words": ["how", "many", "residents", "live", "in", "texas", "?"], "parse": "lambda $0.population texas $0", "parse_with_commas": "lambda $0.population(texas,$0)"}, {"words": ["how", "many", "rivers", "are", "called", "colorado", "?"], "parse": "lambda $0.count colorado (AND (river colorado)) $0", "parse_with_commas": "lambda $0.count(colorado,(river(colorado)),$0)"}, {"words": ["how", "many", "rivers", "are", "found", "in", "colorado", "?"], "parse": "lambda $0.count $1 (AND (loc $1 colorado) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,colorado)),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "colorado", "?"], "parse": "lambda $0.count $1 (AND (loc $1 colorado) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,colorado)),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "iowa", "?"], "parse": "lambda $0.count $1 (AND (loc $1 iowa) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,iowa)),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "missouri", "?"], "parse": "lambda $0.count $1 (AND (loc $1 missouri) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,missouri)),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "new", "york", "?"], "parse": "lambda $0.count $1 (AND (loc $1 new_york) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,new_york)),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "the", "state", "that", "has", "the", "most", "rivers", "?"], "parse": "lambda $0.count $1 (AND (loc $1 $2) (most $2 $3 (AND (loc $3 $2) (river $3) (state $2))) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,$2),most($2,$3,(state($2),loc($3,$2),river($3)))),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "the", "state", "with", "the", "highest", "point", "?"], "parse": "lambda $0.count $1 (AND (highest $3 (place $3)) (loc $1 $2) (loc $3 $2) (river $1) (state $2)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,$2),state($2),loc($3,$2),highest($3,place($3))),$0)"}, {"words": ["how", "many", "rivers", "are", "in", "the", "state", "with", "the", "largest", "population", "?"], "parse": "lambda $0.count $1 (AND (largest $3 (AND (population $2 $3) (state $2))) (loc $1 $2) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,$2),largest($3,(state($2),population($2,$3)))),$0)"}, {"words": ["how", "many", "rivers", "are", "there", "in", "idaho", "?"], "parse": "lambda $0.count $1 (AND (loc $1 idaho) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,idaho)),$0)"}, {"words": ["how", "many", "rivers", "are", "there", "in", "texas", "?"], "parse": "lambda $0.count $1 (AND (loc $1 texas) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,texas)),$0)"}, {"words": ["how", "many", "rivers", "are", "there", "in", "us", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "rivers", "do", "not", "traverse", "the", "state", "with", "the", "capital", "albany", "?"], "parse": "lambda $0.count $1 (AND (not  traverse $1 $2 (state $2) (loc albany $2) (capital albany)) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),not (traverse($1,$2),state($2),loc(albany,$2),capital(albany))),$0)"}, {"words": ["how", "many", "rivers", "does", "alaska", "have", "?"], "parse": "lambda $0.count $1 (AND (loc $1 alaska) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,alaska)),$0)"}, {"words": ["how", "many", "rivers", "does", "colorado", "have", "?"], "parse": "lambda $0.count $1 (AND (loc $1 colorado) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,colorado)),$0)"}, {"words": ["how", "many", "rivers", "in", "texas", "are", "longer", "than", "the", "red", "?"], "parse": "lambda $0.count $1 (AND (loc $1 texas) (longer $1 red) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,texas),longer($1,red)),$0)"}, {"words": ["how", "many", "rivers", "in", "washington", "?"], "parse": "lambda $0.count $1 (AND (loc $1 washington) (river $1)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),loc($1,washington)),$0)"}, {"words": ["how", "many", "rivers", "run", "through", "texas", "?"], "parse": "lambda $0.count $1 (AND (river $1) (traverse $1 texas)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),traverse($1,texas)),$0)"}, {"words": ["how", "many", "rivers", "run", "through", "the", "states", "bordering", "colorado", "?"], "parse": "lambda $0.count $1 (AND (next_to $2 colorado) (river $1) (state $2) (traverse $1 $2)) $0", "parse_with_commas": "lambda $0.count($1,(river($1),traverse($1,$2),state($2),next_to($2,colorado)),$0)"}, {"words": ["how", "many", "square", "kilometers", "in", "the", "us", "?"], "parse": "lambda $0.area usa $0", "parse_with_commas": "lambda $0.area(usa,$0)"}, {"words": ["how", "many", "states", "are", "in", "the", "united", "states", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "states", "are", "in", "the", "usa", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "states", "are", "next", "to", "major", "rivers", "?"], "parse": "lambda $0.count $1 (AND (major $2) (next_to $1 $2) (river $2) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,$2),major($2),river($2)),$0)"}, {"words": ["how", "many", "states", "are", "there", "?"], "parse": "lambda $0.count $1 (state $1) $0", "parse_with_commas": "lambda $0.count($1,state($1),$0)"}, {"words": ["how", "many", "states", "are", "there", "in", "the", "usa", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "states", "are", "there", "in", "united", "states", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "states", "border", "alaska", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 alaska) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,alaska)),$0)"}, {"words": ["how", "many", "states", "border", "at", "least", "one", "other", "state", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 $2) (state $1) (state $2)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,$2),state($2)),$0)"}, {"words": ["how", "many", "states", "border", "colorado", "and", "border", "new", "mexico", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 colorado) (next_to $1 new_mexico) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,colorado),next_to($1,new_mexico)),$0)"}, {"words": ["how", "many", "states", "border", "hawaii", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 hawaii) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,hawaii)),$0)"}, {"words": ["how", "many", "states", "border", "iowa", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 iowa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,iowa)),$0)"}, {"words": ["how", "many", "states", "border", "on", "the", "state", "whose", "capital", "is", "boston", "?"], "parse": "lambda $0.count $1 (AND (capital boston) (loc boston $2) (next_to $1 $2) (state $1) (state $2)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,$2),state($2),loc(boston,$2),capital(boston)),$0)"}, {"words": ["how", "many", "states", "border", "tennessee", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 tennessee) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,tennessee)),$0)"}, {"words": ["how", "many", "states", "border", "texas", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 texas) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,texas)),$0)"}, {"words": ["how", "many", "states", "border", "the", "largest", "state", "?"], "parse": "lambda $0.count $1 (AND (largest $2 (state $2)) (next_to $1 $2) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,$2),largest($2,state($2))),$0)"}, {"words": ["how", "many", "states", "border", "the", "mississippi", "river", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 mississippi) (river mississippi) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,mississippi),river(mississippi)),$0)"}, {"words": ["how", "many", "states", "border", "the", "state", "that", "borders", "the", "most", "states", "?"], "parse": "lambda $0.count $1 (AND (most $2 $3 (AND (next_to $2 $3) (state $2) (state $3))) (next_to $1 $2) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,$2),most($2,$3,(state($2),next_to($2,$3),state($3)))),$0)"}, {"words": ["how", "many", "states", "border", "the", "state", "with", "the", "largest", "population", "?"], "parse": "lambda $0.count $1 (AND (largest $3 (AND (population $2 $3) (state $2))) (next_to $1 $2) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,$2),largest($3,(state($2),population($2,$3)))),$0)"}, {"words": ["how", "many", "states", "do", "not", "have", "rivers", "?"], "parse": "lambda $0.count $1 (AND (not  loc $2 $1 (river $2)) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),not (loc($2,$1),river($2))),$0)"}, {"words": ["how", "many", "states", "does", "iowa", "border", "?"], "parse": "lambda $0.count $1 (AND (next_to iowa $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to(iowa,$1)),$0)"}, {"words": ["how", "many", "states", "does", "missouri", "border", "?"], "parse": "lambda $0.count $1 (AND (next_to missouri $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to(missouri,$1)),$0)"}, {"words": ["how", "many", "states", "does", "tennessee", "border", "?"], "parse": "lambda $0.count $1 (AND (next_to tennessee $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to(tennessee,$1)),$0)"}, {"words": ["how", "many", "states", "does", "the", "colorado", "river", "flow", "through", "?"], "parse": "lambda $0.count $1 (AND (river colorado) (state $1) (traverse colorado $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),river(colorado),traverse(colorado,$1)),$0)"}, {"words": ["how", "many", "states", "does", "the", "colorado", "river", "run", "through", "?"], "parse": "lambda $0.count $1 (AND (river colorado) (state $1) (traverse colorado $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),river(colorado),traverse(colorado,$1)),$0)"}, {"words": ["how", "many", "states", "does", "the", "mississippi", "river", "run", "through", "?"], "parse": "lambda $0.count $1 (AND (river mississippi) (state $1) (traverse mississippi $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),river(mississippi),traverse(mississippi,$1)),$0)"}, {"words": ["how", "many", "states", "does", "the", "mississippi", "run", "through", "?"], "parse": "lambda $0.count $1 (AND (state $1) (traverse mississippi $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),traverse(mississippi,$1)),$0)"}, {"words": ["how", "many", "states", "does", "the", "missouri", "river", "run", "through", "?"], "parse": "lambda $0.count $1 (AND (river missouri) (state $1) (traverse missouri $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),river(missouri),traverse(missouri,$1)),$0)"}, {"words": ["how", "many", "states", "does", "usa", "have", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($1,usa)),$0)"}, {"words": ["how", "many", "states", "have", "a", "city", "called", "rochester", "?"], "parse": "lambda $0.count $1 (AND (loc rochester $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc(rochester,$1)),$0)"}, {"words": ["how", "many", "states", "have", "a", "city", "named", "springfield", "?"], "parse": "lambda $0.count $1 (AND (loc springfield $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc(springfield,$1)),$0)"}, {"words": ["how", "many", "states", "have", "a", "higher", "point", "than", "the", "highest", "point", "of", "the", "state", "with", "the", "largest", "capital", "city", "in", "the", "us", "?"], "parse": "lambda $0.count $1 (AND (higher $2 $3) (highest $3 (AND (largest $5 (AND (capital $5) (city $5) (loc $5 usa))) (loc $3 $4) (loc $5 $4) (place $3) (state $4))) (loc $2 $1) (place $2) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($2,$1),higher($2,$3),place($2),highest($3,(place($3),loc($3,$4),state($4),loc($5,$4),largest($5,(capital($5),city($5),loc($5,usa)))))),$0)"}, {"words": ["how", "many", "states", "have", "cites", "named", "austin", "?"], "parse": "lambda $0.count $1 (AND (city austin) (loc austin $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc(austin,$1),city(austin)),$0)"}, {"words": ["how", "many", "states", "have", "cities", "or", "towns", "named", "springfield", "?"], "parse": "lambda $0.count $1 (AND (city springfield) (loc springfield $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc(springfield,$1),city(springfield)),$0)"}, {"words": ["how", "many", "states", "have", "major", "rivers", "?"], "parse": "lambda $0.count $1 (AND (loc $2 $1) (major $2) (river $2) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($2,$1),major($2),river($2)),$0)"}, {"words": ["how", "many", "states", "in", "the", "us", "does", "the", "shortest", "river", "run", "through", "?"], "parse": "lambda $0.count $1 (AND (loc $1 usa) (shortest $3 (river $3)) (state $1) (traverse $3 $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),loc($1,usa),shortest($3,river($3)),traverse($3,$1)),$0)"}, {"words": ["how", "much", "population", "does", "texas", "have", "?"], "parse": "lambda $0.population texas $0", "parse_with_commas": "lambda $0.population(texas,$0)"}, {"words": ["how", "tall", "is", "mount", "mckinley", "?"], "parse": "lambda $0.elevation mount_mckinley $0", "parse_with_commas": "lambda $0.elevation(mount_mckinley,$0)"}, {"words": ["how", "tall", "is", "the", "highest", "point", "in", "montana", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 montana) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,montana))))"}, {"words": ["in", "what", "state", "is", "mount", "mckinley", "?"], "parse": "lambda $0.AND (loc mount_mckinley $0) (state $0)", "parse_with_commas": "lambda $0.(loc(mount_mckinley,$0),state($0))"}, {"words": ["in", "which", "state", "does", "the", "highest", "point", "in", "usa", "exist", "?"], "parse": "lambda $0.AND (highest $1 (AND (loc $1 usa) (place $1))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(loc($1,$0),state($0),highest($1,(place($1),loc($1,usa))))"}, {"words": ["in", "which", "state", "is", "rochester", "?"], "parse": "lambda $0.AND (loc rochester $0) (state $0)", "parse_with_commas": "lambda $0.(loc(rochester,$0),state($0))"}, {"words": ["iowa", "borders", "how", "many", "states", "?"], "parse": "lambda $0.count $1 (AND (next_to iowa $1) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(next_to(iowa,$1),state($1)),$0)"}, {"words": ["list", "the", "states", "?"], "parse": "lambda $0.state $0", "parse_with_commas": "lambda $0.state($0)"}, {"words": ["name", "all", "the", "lakes", "of", "us", "?"], "parse": "lambda $0.AND (lake $0) (loc $0 usa)", "parse_with_commas": "lambda $0.(lake($0),loc($0,usa))"}, {"words": ["name", "all", "the", "rivers", "in", "colorado", "?"], "parse": "lambda $0.AND (loc $0 colorado) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,colorado))"}, {"words": ["name", "the", "50", "capitals", "in", "the", "usa", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 usa)", "parse_with_commas": "lambda $0.(capital($0),loc($0,usa))"}, {"words": ["name", "the", "longest", "river", "in", "us", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,usa)))"}, {"words": ["name", "the", "major", "lakes", "in", "michigan", "?"], "parse": "lambda $0.AND (lake $0) (loc $0 michigan) (major $0)", "parse_with_commas": "lambda $0.(major($0),lake($0),loc($0,michigan))"}, {"words": ["name", "the", "major", "rivers", "in", "florida", "?"], "parse": "lambda $0.AND (loc $0 florida) (major $0) (river $0)", "parse_with_commas": "lambda $0.(major($0),river($0),loc($0,florida))"}, {"words": ["name", "the", "rivers", "in", "arkansas", "?"], "parse": "lambda $0.AND (loc $0 arkansas) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,arkansas))"}, {"words": ["name", "the", "states", "which", "have", "no", "surrounding", "states", "?"], "parse": "lambda $0.AND (not  next_to $0 $1 (state $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),not (next_to($0,$1),state($1)))"}, {"words": ["number", "of", "citizens", "in", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["number", "of", "people", "in", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["number", "of", "states", "bordering", "iowa", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 iowa) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,iowa)),$0)"}, {"words": ["of", "the", "states", "washed", "by", "the", "mississippi", "river", "which", "has", "the", "lowest", "point", "?"], "parse": "lambda $0.lowest $1 (AND (loc $1 $0) (place $1) (state $0) (traverse mississippi $0))", "parse_with_commas": "lambda $0.lowest($1,(state($0),traverse(mississippi,$0),loc($1,$0),place($1)))"}, {"words": ["people", "in", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["population", "of", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["rivers", "in", "new", "york", "?"], "parse": "lambda $0.AND (loc $0 new_york) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,new_york))"}, {"words": ["sacramento", "is", "the", "capital", "of", "which", "state", "?"], "parse": "lambda $0.AND (capital sacramento) (loc sacramento $0) (state $0)", "parse_with_commas": "lambda $0.(capital(sacramento),loc(sacramento,$0),state($0))"}, {"words": ["san", "antonio", "is", "in", "what", "state", "?"], "parse": "lambda $0.AND (loc san_antonio $0) (state $0)", "parse_with_commas": "lambda $0.(loc(san_antonio,$0),state($0))"}, {"words": ["show", "major", "cities", "in", "colorado", "?"], "parse": "lambda $0.AND (city $0) (loc $0 colorado) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,colorado))"}, {"words": ["show", "me", "all", "the", "major", "lakes", "in", "the", "us", "?"], "parse": "lambda $0.AND (lake $0) (loc $0 usa) (major $0)", "parse_with_commas": "lambda $0.(major($0),lake($0),loc($0,usa))"}, {"words": ["state", "the", "state", "with", "the", "largest", "area", "?"], "parse": "lambda $0.AND (largest $1 (AND (area $0 $1) (state $0))) (state $0)", "parse_with_commas": "lambda $0.(state($0),largest($1,(state($0),area($0,$1))))"}, {"words": ["states", "bordering", "iowa", "?"], "parse": "lambda $0.AND (next_to $0 iowa) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,iowa))"}, {"words": ["tell", "me", "what", "cities", "are", "in", "texas", "?"], "parse": "lambda $0.AND (city $0) (loc $0 texas)", "parse_with_commas": "lambda $0.(city($0),loc($0,texas))"}, {"words": ["through", "which", "states", "does", "the", "longest", "river", "in", "texas", "run", "?"], "parse": "lambda $0.AND (longest $1 (AND (loc $1 texas) (river $1))) (traverse $1 $0)", "parse_with_commas": "lambda $0.(longest($1,(river($1),loc($1,texas))),traverse($1,$0))"}, {"words": ["through", "which", "states", "does", "the", "mississippi", "flow", "?"], "parse": "lambda $0.AND (state $0) (traverse mississippi $0)", "parse_with_commas": "lambda $0.(state($0),traverse(mississippi,$0))"}, {"words": ["through", "which", "states", "does", "the", "mississippi", "run", "?"], "parse": "lambda $0.AND (state $0) (traverse mississippi $0)", "parse_with_commas": "lambda $0.(state($0),traverse(mississippi,$0))"}, {"words": ["what", "are", "all", "the", "rivers", "in", "texas", "?"], "parse": "lambda $0.AND (loc $0 texas) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,texas))"}, {"words": ["what", "are", "major", "rivers", "in", "texas", "?"], "parse": "lambda $0.AND (loc $0 texas) (major $0) (river $0)", "parse_with_commas": "lambda $0.(major($0),river($0),loc($0,texas))"}, {"words": ["what", "are", "the", "biggest", "rivers", "in", "texas", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 texas) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,texas)))"}, {"words": ["what", "are", "the", "capital", "cities", "of", "the", "states", "which", "border", "texas", "?"], "parse": "lambda $0.AND (capital $0) (city $0) (loc $0 $1) (next_to $1 texas) (state $1)", "parse_with_commas": "lambda $0.(capital($0),city($0),loc($0,$1),state($1),next_to($1,texas))"}, {"words": ["what", "are", "the", "capital", "city", "in", "texas", "?"], "parse": "lambda $0.AND (capital $0) (city $0) (loc $0 texas)", "parse_with_commas": "lambda $0.(capital($0),city($0),loc($0,texas))"}, {"words": ["what", "are", "the", "capitals", "of", "states", "that", "border", "missouri", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (next_to $1 missouri) (state $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),next_to($1,missouri))"}, {"words": ["what", "are", "the", "capitals", "of", "the", "states", "that", "border", "texas", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (next_to $1 texas) (state $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),next_to($1,texas))"}, {"words": ["what", "are", "the", "cities", "in", "california", "?"], "parse": "lambda $0.AND (city $0) (loc $0 california)", "parse_with_commas": "lambda $0.(city($0),loc($0,california))"}, {"words": ["what", "are", "the", "cities", "in", "states", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.AND (city $0) (loc $0 $1) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(city($0),loc($0,$1),state($1),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "cities", "of", "the", "state", "with", "the", "highest", "point", "?"], "parse": "lambda $0.AND (city $0) (highest $2 (place $2)) (loc $0 $1) (loc $2 $1) (state $1)", "parse_with_commas": "lambda $0.(city($0),loc($0,$1),state($1),loc($2,$1),highest($2,place($2)))"}, {"words": ["what", "are", "the", "highest", "points", "of", "all", "the", "states", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (place $0) (state $1))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),state($1)))"}, {"words": ["what", "are", "the", "highest", "points", "of", "states", "surrounding", "mississippi", "?"], "parse": "lambda $0.AND (highest $0 (AND (loc $0 $1) (place $0) (state $1))) (next_to $1 mississippi)", "parse_with_commas": "lambda $0.(highest($0,(place($0),loc($0,$1),state($1))),next_to($1,mississippi))"}, {"words": ["what", "are", "the", "lakes", "in", "states", "bordering", "texas", "?"], "parse": "lambda $0.AND (lake $0) (loc $0 $1) (next_to $1 texas) (state $1)", "parse_with_commas": "lambda $0.(lake($0),loc($0,$1),state($1),next_to($1,texas))"}, {"words": ["what", "are", "the", "largest", "cities", "in", "the", "states", "that", "border", "the", "largest", "state", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (largest $2 (state $2)) (loc $0 $1) (next_to $1 $2) (state $1))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),state($1),next_to($1,$2),largest($2,state($2))))"}, {"words": ["what", "are", "the", "major", "cities", "in", "alabama", "?"], "parse": "lambda $0.AND (city $0) (loc $0 alabama) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,alabama))"}, {"words": ["what", "are", "the", "major", "cities", "in", "alaska", "?"], "parse": "lambda $0.AND (city $0) (loc $0 alaska) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,alaska))"}, {"words": ["what", "are", "the", "major", "cities", "in", "california", "?"], "parse": "lambda $0.AND (city $0) (loc $0 california) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,california))"}, {"words": ["what", "are", "the", "major", "cities", "in", "delaware", "?"], "parse": "lambda $0.AND (city $0) (loc $0 delaware) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,delaware))"}, {"words": ["what", "are", "the", "major", "cities", "in", "kansas", "?"], "parse": "lambda $0.AND (city $0) (loc $0 kansas) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,kansas))"}, {"words": ["what", "are", "the", "major", "cities", "in", "missouri", "?"], "parse": "lambda $0.AND (city $0) (loc $0 missouri) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,missouri))"}, {"words": ["what", "are", "the", "major", "cities", "in", "new", "mexico", "?"], "parse": "lambda $0.AND (city $0) (loc $0 new_mexico) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,new_mexico))"}, {"words": ["what", "are", "the", "major", "cities", "in", "new", "york", "?"], "parse": "lambda $0.AND (city $0) (loc $0 new_york) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,new_york))"}, {"words": ["what", "are", "the", "major", "cities", "in", "north", "carolina", "?"], "parse": "lambda $0.AND (city $0) (loc $0 north_carolina) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,north_carolina))"}, {"words": ["what", "are", "the", "major", "cities", "in", "ohio", "?"], "parse": "lambda $0.AND (city $0) (loc $0 ohio) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,ohio))"}, {"words": ["what", "are", "the", "major", "cities", "in", "oklahoma", "?"], "parse": "lambda $0.AND (city $0) (loc $0 oklahoma) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,oklahoma))"}, {"words": ["what", "are", "the", "major", "cities", "in", "rhode", "island", "?"], "parse": "lambda $0.AND (city $0) (loc $0 rhode_island) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,rhode_island))"}, {"words": ["what", "are", "the", "major", "cities", "in", "states", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.AND (city $0) (major $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(major($0),city($0),state($1),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "major", "cities", "in", "texas", "?"], "parse": "lambda $0.AND (city $0) (loc $0 texas) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,texas))"}, {"words": ["what", "are", "the", "major", "cities", "in", "the", "largest", "state", "?"], "parse": "lambda $0.AND (city $0) (largest $1 (state $1)) (loc $0 $1) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,$1),largest($1,state($1)))"}, {"words": ["what", "are", "the", "major", "cities", "in", "the", "smallest", "state", "in", "the", "us", "?"], "parse": "lambda $0.AND (city $0) (loc $0 $1) (major $0) (smallest $1 (AND (loc $1 usa) (state $1)))", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,$1),smallest($1,(state($1),loc($1,usa))))"}, {"words": ["what", "are", "the", "major", "cities", "in", "the", "state", "of", "california", "?"], "parse": "lambda $0.AND (city $0) (loc $0 california) (major $0) (state california)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,california),state(california))"}, {"words": ["what", "are", "the", "major", "cities", "in", "the", "states", "through", "which", "the", "major", "river", "in", "virginia", "runs", "?"], "parse": "lambda $0.AND (city $0) (loc $0 $1) (loc $2 virginia) (major $0) (river $2) (state $1) (traverse $2 $1)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,$1),state($1),river($2),loc($2,virginia),traverse($2,$1))"}, {"words": ["what", "are", "the", "major", "cities", "in", "the", "usa", "?"], "parse": "lambda $0.AND (city $0) (loc $0 usa) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,usa))"}, {"words": ["what", "are", "the", "major", "cities", "in", "vermont", "?"], "parse": "lambda $0.AND (city $0) (loc $0 vermont) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,vermont))"}, {"words": ["what", "are", "the", "major", "cities", "in", "wyoming", "?"], "parse": "lambda $0.AND (city $0) (loc $0 wyoming) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,wyoming))"}, {"words": ["what", "are", "the", "major", "cities", "of", "texas", "?"], "parse": "lambda $0.AND (city $0) (loc $0 texas) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,texas))"}, {"words": ["what", "are", "the", "major", "cities", "of", "the", "united", "states", "?"], "parse": "lambda $0.AND (city $0) (loc $0 usa) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,usa))"}, {"words": ["what", "are", "the", "major", "cities", "of", "the", "us", "?"], "parse": "lambda $0.AND (city $0) (loc $0 usa) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,usa))"}, {"words": ["what", "are", "the", "major", "lakes", "in", "united", "states", "?"], "parse": "lambda $0.AND (lake $0) (loc $0 usa) (major $0)", "parse_with_commas": "lambda $0.(major($0),lake($0),loc($0,usa))"}, {"words": ["what", "are", "the", "major", "rivers", "in", "ohio", "?"], "parse": "lambda $0.AND (loc $0 ohio) (major $0) (river $0)", "parse_with_commas": "lambda $0.(major($0),river($0),loc($0,ohio))"}, {"words": ["what", "are", "the", "major", "rivers", "in", "the", "us", "?"], "parse": "lambda $0.AND (loc $0 usa) (major $0) (river $0)", "parse_with_commas": "lambda $0.(major($0),river($0),loc($0,usa))"}, {"words": ["what", "are", "the", "names", "of", "the", "major", "cities", "in", "illinois", "?"], "parse": "lambda $0.AND (city $0) (loc $0 illinois) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,illinois))"}, {"words": ["what", "are", "the", "neighboring", "states", "for", "michigan", "?"], "parse": "lambda $0.AND (next_to $0 michigan) (state $0)", "parse_with_commas": "lambda $0.(next_to($0,michigan),state($0))"}, {"words": ["what", "are", "the", "population", "densities", "of", "each", "us", "state", "?"], "parse": "lambda $0.AND (density $1 $0) (state $1)", "parse_with_commas": "lambda $0.(density($1,$0),state($1))"}, {"words": ["what", "are", "the", "population", "of", "mississippi", "?"], "parse": "lambda $0.population mississippi $0", "parse_with_commas": "lambda $0.population(mississippi,$0)"}, {"words": ["what", "are", "the", "populations", "of", "all", "the", "major", "cities", "in", "montana", "?"], "parse": "lambda $0.AND (city $1) (loc $1 montana) (major $1) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),major($1),city($1),loc($1,montana))"}, {"words": ["what", "are", "the", "populations", "of", "states", "through", "which", "the", "mississippi", "river", "run", "?"], "parse": "lambda $0.AND (population $1 $0) (river mississippi) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),river(mississippi),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "states", "through", "which", "the", "mississippi", "river", "runs", "?"], "parse": "lambda $0.AND (population $1 $0) (river mississippi) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),river(mississippi),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "states", "through", "which", "the", "mississippi", "run", "?"], "parse": "lambda $0.AND (population $1 $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "states", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.AND (population $1 $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "states", "which", "border", "texas", "?"], "parse": "lambda $0.AND (next_to $1 texas) (population $1 $0) (state $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),next_to($1,texas))"}, {"words": ["what", "are", "the", "populations", "of", "the", "major", "cities", "of", "texas", "?"], "parse": "lambda $0.AND (city $1) (loc $1 texas) (major $1) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),major($1),city($1),loc($1,texas))"}, {"words": ["what", "are", "the", "populations", "of", "the", "states", "through", "which", "the", "mississippi", "river", "run", "?"], "parse": "lambda $0.AND (population $1 $0) (river mississippi) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),river(mississippi),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "the", "states", "through", "which", "the", "mississippi", "river", "runs", "?"], "parse": "lambda $0.AND (population $1 $0) (river mississippi) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),river(mississippi),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "the", "states", "through", "which", "the", "mississippi", "run", "?"], "parse": "lambda $0.AND (population $1 $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "populations", "of", "the", "states", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.AND (population $1 $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(population($1,$0),state($1),traverse(mississippi,$1))"}, {"words": ["what", "are", "the", "rivers", "in", "alaska", "?"], "parse": "lambda $0.AND (loc $0 alaska) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,alaska))"}, {"words": ["what", "are", "the", "rivers", "in", "the", "state", "of", "indiana", "?"], "parse": "lambda $0.AND (loc $0 indiana) (river $0) (state indiana)", "parse_with_commas": "lambda $0.(river($0),loc($0,indiana),state(indiana))"}, {"words": ["what", "are", "the", "rivers", "in", "the", "state", "of", "texas", "?"], "parse": "lambda $0.AND (loc $0 texas) (river $0) (state texas)", "parse_with_commas": "lambda $0.(river($0),loc($0,texas),state(texas))"}, {"words": ["what", "are", "the", "rivers", "of", "montana", "?"], "parse": "lambda $0.AND (loc $0 montana) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,montana))"}, {"words": ["what", "are", "the", "states", "?"], "parse": "lambda $0.state $0", "parse_with_commas": "lambda $0.state($0)"}, {"words": ["what", "are", "the", "states", "that", "border", "the", "state", "with", "the", "greatest", "population", "?"], "parse": "lambda $0.AND (largest $2 (AND (population $1 $2) (state $1))) (next_to $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($1,$0),largest($2,(state($1),population($1,$2))))"}, {"words": ["what", "are", "the", "states", "that", "the", "potomac", "run", "through", "?"], "parse": "lambda $0.AND (state $0) (traverse potomac $0)", "parse_with_commas": "lambda $0.(state($0),traverse(potomac,$0))"}, {"words": ["what", "are", "the", "states", "through", "which", "the", "longest", "river", "runs", "?"], "parse": "lambda $0.AND (longest $1 (AND (river $1) (traverse $1 $0))) (state $0)", "parse_with_commas": "lambda $0.(state($0),longest($1,(river($1),traverse($1,$0))))"}, {"words": ["what", "can", "you", "tell", "me", "about", "the", "population", "of", "missouri", "?"], "parse": "lambda $0.population missouri $0", "parse_with_commas": "lambda $0.population(missouri,$0)"}, {"words": ["what", "capital", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (capital $0) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(capital($0),population($0,$1)))"}, {"words": ["what", "capital", "is", "the", "largest", "in", "the", "us", "?"], "parse": "lambda $0.largest $0 (AND (capital $0) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($0,(capital($0),loc($0,usa)))"}, {"words": ["what", "cities", "are", "located", "in", "pennsylvania", "?"], "parse": "lambda $0.AND (city $0) (loc $0 pennsylvania)", "parse_with_commas": "lambda $0.(city($0),loc($0,pennsylvania))"}, {"words": ["what", "cities", "in", "california", "?"], "parse": "lambda $0.AND (city $0) (loc $0 california)", "parse_with_commas": "lambda $0.(city($0),loc($0,california))"}, {"words": ["what", "cities", "in", "texas", "have", "the", "highest", "number", "of", "citizens", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 texas) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,texas),population($0,$1)))"}, {"words": ["what", "cities", "in", "texas", "have", "the", "highest", "populations", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 texas) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,texas),population($0,$1)))"}, {"words": ["what", "city", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),population($0,$1)))"}, {"words": ["what", "city", "has", "the", "least", "population", "?"], "parse": "lambda $0.smallest $1 (AND (city $0) (population $0 $1))", "parse_with_commas": "lambda $0.smallest($1,(city($0),population($0,$1)))"}, {"words": ["what", "city", "has", "the", "most", "people", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),population($0,$1)))"}, {"words": ["what", "city", "in", "the", "united", "states", "has", "the", "highest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (density $0 $1) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,usa),density($0,$1)))"}, {"words": ["what", "is", "capital", "of", "iowa", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 iowa)", "parse_with_commas": "lambda $0.(capital($0),loc($0,iowa))"}, {"words": ["what", "is", "capital", "of", "the", "state", "with", "the", "lowest", "point", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (loc $2 $1) (lowest $2 (place $2)) (state $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),loc($2,$1),lowest($2,place($2)))"}, {"words": ["what", "is", "largest", "capital", "?"], "parse": "lambda $0.largest $0 (capital $0)", "parse_with_commas": "lambda $0.largest($0,capital($0))"}, {"words": ["what", "is", "the", "adjacent", "state", "of", "california", "?"], "parse": "lambda $0.AND (next_to $0 california) (state $0)", "parse_with_commas": "lambda $0.(next_to($0,california),state($0))"}, {"words": ["what", "is", "the", "area", "of", "alaska", "?"], "parse": "lambda $0.area alaska $0", "parse_with_commas": "lambda $0.area(alaska,$0)"}, {"words": ["what", "is", "the", "area", "of", "all", "the", "states", "combined", "?"], "parse": "lambda $0.sum $1 (AND (area $2 $1) (state $2)) $0", "parse_with_commas": "lambda $0.sum($1,(area($2,$1),state($2)),$0)"}, {"words": ["what", "is", "the", "area", "of", "california", "?"], "parse": "lambda $0.area california $0", "parse_with_commas": "lambda $0.area(california,$0)"}, {"words": ["what", "is", "the", "area", "of", "florida", "?"], "parse": "lambda $0.area florida $0", "parse_with_commas": "lambda $0.area(florida,$0)"}, {"words": ["what", "is", "the", "area", "of", "idaho", "?"], "parse": "lambda $0.area idaho $0", "parse_with_commas": "lambda $0.area(idaho,$0)"}, {"words": ["what", "is", "the", "area", "of", "maine", "?"], "parse": "lambda $0.area maine $0", "parse_with_commas": "lambda $0.area(maine,$0)"}, {"words": ["what", "is", "the", "area", "of", "maryland", "in", "square", "kilometers", "?"], "parse": "lambda $0.area maryland $0", "parse_with_commas": "lambda $0.area(maryland,$0)"}, {"words": ["what", "is", "the", "area", "of", "new", "mexico", "?"], "parse": "lambda $0.area new_mexico $0", "parse_with_commas": "lambda $0.area(new_mexico,$0)"}, {"words": ["what", "is", "the", "area", "of", "ohio", "?"], "parse": "lambda $0.area ohio $0", "parse_with_commas": "lambda $0.area(ohio,$0)"}, {"words": ["what", "is", "the", "area", "of", "seattle", "?"], "parse": "lambda $0.area seattle $0", "parse_with_commas": "lambda $0.area(seattle,$0)"}, {"words": ["what", "is", "the", "area", "of", "south", "carolina", "?"], "parse": "lambda $0.area south_carolina $0", "parse_with_commas": "lambda $0.area(south_carolina,$0)"}, {"words": ["what", "is", "the", "area", "of", "texas", "?"], "parse": "lambda $0.area texas $0", "parse_with_commas": "lambda $0.area(texas,$0)"}, {"words": ["what", "is", "the", "area", "of", "the", "largest", "state", "?"], "parse": "lambda $0.AND (area $1 $0) (largest $1 (state $1))", "parse_with_commas": "lambda $0.(area($1,$0),largest($1,state($1)))"}, {"words": ["what", "is", "the", "area", "of", "the", "smallest", "state", "?"], "parse": "lambda $0.AND (area $1 $0) (smallest $1 (state $1))", "parse_with_commas": "lambda $0.(area($1,$0),smallest($1,state($1)))"}, {"words": ["what", "is", "the", "area", "of", "the", "state", "with", "the", "capital", "albany", "?"], "parse": "lambda $0.AND (area $1 $0) (capital albany) (loc albany $1) (state $1)", "parse_with_commas": "lambda $0.(area($1,$0),state($1),loc(albany,$1),capital(albany))"}, {"words": ["what", "is", "the", "area", "of", "the", "state", "with", "the", "smallest", "population", "density", "?"], "parse": "lambda $0.AND (area $1 $0) (smallest $2 (AND (density $1 $2) (state $1)))", "parse_with_commas": "lambda $0.(area($1,$0),smallest($2,(state($1),density($1,$2))))"}, {"words": ["what", "is", "the", "area", "of", "the", "states", "?"], "parse": "lambda $0.AND (area $1 $0) (state $1)", "parse_with_commas": "lambda $0.(area($1,$0),state($1))"}, {"words": ["what", "is", "the", "area", "of", "the", "texas", "state", "?"], "parse": "lambda $0.area texas $0", "parse_with_commas": "lambda $0.area(texas,$0)"}, {"words": ["what", "is", "the", "area", "of", "wisconsin", "?"], "parse": "lambda $0.area wisconsin $0", "parse_with_commas": "lambda $0.area(wisconsin,$0)"}, {"words": ["what", "is", "the", "average", "population", "of", "the", "us", "by", "state", "?"], "parse": "lambda $0.density usa $0", "parse_with_commas": "lambda $0.density(usa,$0)"}, {"words": ["what", "is", "the", "average", "population", "per", "square", "km", "in", "pennsylvania", "?"], "parse": "lambda $0.density pennsylvania $0", "parse_with_commas": "lambda $0.density(pennsylvania,$0)"}, {"words": ["what", "is", "the", "average", "population", "per", "square", "km", "in", "the", "us", "?"], "parse": "lambda $0.density usa $0", "parse_with_commas": "lambda $0.density(usa,$0)"}, {"words": ["what", "is", "the", "biggest", "american", "city", "in", "a", "state", "with", "a", "river", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 $1) (loc $2 $1) (river $2) (state $1))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),state($1),loc($2,$1),river($2)))"}, {"words": ["what", "is", "the", "biggest", "capital", "city", "in", "the", "us", "?"], "parse": "lambda $0.largest $0 (AND (capital $0) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($0,(capital($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "arizona", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 arizona))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,arizona)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "georgia", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 georgia))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,georgia)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "kansas", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 kansas))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,kansas)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "louisiana", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 louisiana))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,louisiana)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "nebraska", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 nebraska))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,nebraska)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "oregon", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 oregon))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,oregon)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "texas", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 texas))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "the", "smallest", "state", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 $1) (smallest $1 (state $1)))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),smallest($1,state($1))))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "the", "us", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "the", "usa", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "usa", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "biggest", "city", "in", "wyoming", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 wyoming))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,wyoming)))"}, {"words": ["what", "is", "the", "biggest", "river", "in", "illinois", "?"], "parse": "lambda $0.largest $0 (AND (loc $0 illinois) (river $0))", "parse_with_commas": "lambda $0.largest($0,(river($0),loc($0,illinois)))"}, {"words": ["what", "is", "the", "biggest", "state", "?"], "parse": "lambda $0.largest $0 (state $0)", "parse_with_commas": "lambda $0.largest($0,state($0))"}, {"words": ["what", "is", "the", "biggest", "state", "in", "continental", "us", "?"], "parse": "lambda $0.largest $0 (AND (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "biggest", "state", "in", "the", "usa", "?"], "parse": "lambda $0.largest $0 (AND (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "capital", "city", "of", "the", "largest", "state", "in", "the", "us", "?"], "parse": "lambda $0.AND (capital $0) (city $0) (largest $1 (AND (loc $1 usa) (state $1))) (loc $0 $1)", "parse_with_commas": "lambda $0.(capital($0),city($0),loc($0,$1),largest($1,(state($1),loc($1,usa))))"}, {"words": ["what", "is", "the", "capital", "of", "california", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 california)", "parse_with_commas": "lambda $0.(capital($0),loc($0,california))"}, {"words": ["what", "is", "the", "capital", "of", "colorado", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 colorado)", "parse_with_commas": "lambda $0.(capital($0),loc($0,colorado))"}, {"words": ["what", "is", "the", "capital", "of", "georgia", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 georgia)", "parse_with_commas": "lambda $0.(capital($0),loc($0,georgia))"}, {"words": ["what", "is", "the", "capital", "of", "hawaii", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 hawaii)", "parse_with_commas": "lambda $0.(capital($0),loc($0,hawaii))"}, {"words": ["what", "is", "the", "capital", "of", "illinois", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 illinois)", "parse_with_commas": "lambda $0.(capital($0),loc($0,illinois))"}, {"words": ["what", "is", "the", "capital", "of", "indiana", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 indiana)", "parse_with_commas": "lambda $0.(capital($0),loc($0,indiana))"}, {"words": ["what", "is", "the", "capital", "of", "iowa", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 iowa)", "parse_with_commas": "lambda $0.(capital($0),loc($0,iowa))"}, {"words": ["what", "is", "the", "capital", "of", "maine", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 maine)", "parse_with_commas": "lambda $0.(capital($0),loc($0,maine))"}, {"words": ["what", "is", "the", "capital", "of", "maryland", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 maryland)", "parse_with_commas": "lambda $0.(capital($0),loc($0,maryland))"}, {"words": ["what", "is", "the", "capital", "of", "massachusetts", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 massachusetts)", "parse_with_commas": "lambda $0.(capital($0),loc($0,massachusetts))"}, {"words": ["what", "is", "the", "capital", "of", "michigan", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 michigan)", "parse_with_commas": "lambda $0.(capital($0),loc($0,michigan))"}, {"words": ["what", "is", "the", "capital", "of", "new", "hampshire", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 new_hampshire)", "parse_with_commas": "lambda $0.(capital($0),loc($0,new_hampshire))"}, {"words": ["what", "is", "the", "capital", "of", "new", "jersey", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 new_jersey)", "parse_with_commas": "lambda $0.(capital($0),loc($0,new_jersey))"}, {"words": ["what", "is", "the", "capital", "of", "new", "york", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 new_york)", "parse_with_commas": "lambda $0.(capital($0),loc($0,new_york))"}, {"words": ["what", "is", "the", "capital", "of", "north", "dakota", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 north_dakota)", "parse_with_commas": "lambda $0.(capital($0),loc($0,north_dakota))"}, {"words": ["what", "is", "the", "capital", "of", "ohio", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 ohio)", "parse_with_commas": "lambda $0.(capital($0),loc($0,ohio))"}, {"words": ["what", "is", "the", "capital", "of", "pennsylvania", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 pennsylvania)", "parse_with_commas": "lambda $0.(capital($0),loc($0,pennsylvania))"}, {"words": ["what", "is", "the", "capital", "of", "states", "that", "have", "cities", "named", "durham", "?"], "parse": "lambda $0.AND (capital $0) (city durham) (loc $0 $1) (loc durham $1) (state $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),loc(durham,$1),city(durham))"}, {"words": ["what", "is", "the", "capital", "of", "texas", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 texas)", "parse_with_commas": "lambda $0.(capital($0),loc($0,texas))"}, {"words": ["what", "is", "the", "capital", "of", "the", "alabama", "state", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 alabama) (state alabama)", "parse_with_commas": "lambda $0.(capital($0),loc($0,alabama),state(alabama))"}, {"words": ["what", "is", "the", "capital", "of", "the", "florida", "state", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 florida) (state florida)", "parse_with_commas": "lambda $0.(capital($0),loc($0,florida),state(florida))"}, {"words": ["what", "is", "the", "capital", "of", "the", "largest", "state", "?"], "parse": "lambda $0.AND (capital $0) (largest $1 (state $1)) (loc $0 $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),largest($1,state($1)))"}, {"words": ["what", "is", "the", "capital", "of", "the", "smallest", "state", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (smallest $1 (state $1))", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),smallest($1,state($1)))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "texas", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 texas) (state texas)", "parse_with_commas": "lambda $0.(capital($0),loc($0,texas),state(texas))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "that", "borders", "the", "most", "states", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (most $1 $2 (AND (next_to $1 $2) (state $1) (state $2)))", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),most($1,$2,(state($1),next_to($1,$2),state($2))))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "that", "borders", "the", "state", "that", "borders", "texas", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (next_to $1 $2) (next_to $2 texas) (state $1) (state $2)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),next_to($1,$2),state($2),next_to($2,texas))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "with", "the", "highest", "elevation", "?"], "parse": "lambda $0.AND (capital $0) (highest $2 (place $2)) (loc $0 $1) (loc $2 $1) (state $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),loc($2,$1),highest($2,place($2)))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "with", "the", "highest", "point", "?"], "parse": "lambda $0.AND (capital $0) (highest $2 (AND (loc $2 $1) (place $2) (state $1))) (loc $0 $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),highest($2,(state($1),loc($2,$1),place($2))))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "with", "the", "largest", "population", "?"], "parse": "lambda $0.AND (capital $0) (largest $2 (AND (population $1 $2) (state $1))) (loc $0 $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),largest($2,(state($1),population($1,$2))))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "with", "the", "largest", "population", "density", "?"], "parse": "lambda $0.AND (capital $0) (largest $2 (AND (density $1 $2) (state $1))) (loc $0 $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),largest($2,(state($1),density($1,$2))))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "with", "the", "longest", "river", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (longest $2 (AND (loc $2 $1) (river $2) (state $1)))", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),longest($2,(state($1),loc($2,$1),river($2))))"}, {"words": ["what", "is", "the", "capital", "of", "the", "state", "with", "the", "most", "inhabitants", "?"], "parse": "lambda $0.AND (capital $0) (largest $2 (AND (population $1 $2) (state $1))) (loc $0 $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),largest($2,(state($1),population($1,$2))))"}, {"words": ["what", "is", "the", "capital", "of", "utah", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 utah)", "parse_with_commas": "lambda $0.(capital($0),loc($0,utah))"}, {"words": ["what", "is", "the", "capital", "of", "vermont", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 vermont)", "parse_with_commas": "lambda $0.(capital($0),loc($0,vermont))"}, {"words": ["what", "is", "the", "capital", "of", "washington", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 washington)", "parse_with_commas": "lambda $0.(capital($0),loc($0,washington))"}, {"words": ["what", "is", "the", "city", "in", "texas", "with", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 texas) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,texas),population($0,$1)))"}, {"words": ["what", "is", "the", "city", "with", "the", "smallest", "population", "?"], "parse": "lambda $0.smallest $1 (AND (city $0) (population $0 $1))", "parse_with_commas": "lambda $0.smallest($1,(city($0),population($0,$1)))"}, {"words": ["what", "is", "the", "combined", "area", "of", "all", "50", "states", "?"], "parse": "lambda $0.sum $1 (AND (area $2 $1) (state $2)) $0", "parse_with_commas": "lambda $0.sum($1,(area($2,$1),state($2)),$0)"}, {"words": ["what", "is", "the", "combined", "population", "of", "all", "50", "states", "?"], "parse": "lambda $0.sum $1 (AND (population $2 $1) (state $2)) $0", "parse_with_commas": "lambda $0.sum($1,(population($2,$1),state($2)),$0)"}, {"words": ["what", "is", "the", "density", "of", "texas", "?"], "parse": "lambda $0.density texas $0", "parse_with_commas": "lambda $0.density(texas,$0)"}, {"words": ["what", "is", "the", "density", "of", "the", "new", "york", "?"], "parse": "lambda $0.density new_york $0", "parse_with_commas": "lambda $0.density(new_york,$0)"}, {"words": ["what", "is", "the", "elevation", "of", "death", "valley", "?"], "parse": "lambda $0.elevation death_valley $0", "parse_with_commas": "lambda $0.elevation(death_valley,$0)"}, {"words": ["what", "is", "the", "elevation", "of", "the", "highest", "point", "in", "the", "usa", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 usa) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,usa))))"}, {"words": ["what", "is", "the", "height", "of", "mount", "mckinley", "?"], "parse": "lambda $0.elevation mount_mckinley $0", "parse_with_commas": "lambda $0.elevation(mount_mckinley,$0)"}, {"words": ["what", "is", "the", "height", "of", "the", "highest", "mountain", "in", "texas", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 texas) (mountain $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(mountain($1),loc($1,texas))))"}, {"words": ["what", "is", "the", "height", "of", "the", "highest", "point", "in", "the", "usa", "?"], "parse": "lambda $0.AND (elevation $1 $0) (highest $1 (AND (loc $1 usa) (place $1)))", "parse_with_commas": "lambda $0.(elevation($1,$0),highest($1,(place($1),loc($1,usa))))"}, {"words": ["what", "is", "the", "high", "point", "of", "wyoming", "?"], "parse": "lambda $0.AND (high_point wyoming $0) (loc $0 wyoming)", "parse_with_commas": "lambda $0.(high_point(wyoming,$0),loc($0,wyoming))"}, {"words": ["what", "is", "the", "highest", "elevation", "in", "new", "mexico", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 new_mexico) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,new_mexico)))"}, {"words": ["what", "is", "the", "highest", "elevation", "in", "south", "carolina", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 south_carolina) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,south_carolina)))"}, {"words": ["what", "is", "the", "highest", "elevation", "in", "texas", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 texas) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "highest", "elevation", "in", "the", "united", "states", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "mountain", "in", "alaska", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 alaska) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,alaska)))"}, {"words": ["what", "is", "the", "highest", "mountain", "in", "texas", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 texas) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "highest", "mountain", "in", "the", "us", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "mountain", "in", "us", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "colorado", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 colorado) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,colorado)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "delaware", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 delaware) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,delaware)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "each", "state", "whose", "lowest", "point", "is", "sea", "level", "?"], "parse": "lambda $0.AND (elevation $2 0) (highest $0 (AND (loc $0 $1) (place $0) (state $1))) (lowest $2 (AND (loc $2 $1) (place $2)))", "parse_with_commas": "lambda $0.(highest($0,(place($0),loc($0,$1),state($1))),lowest($2,(loc($2,$1),place($2))),elevation($2,0))"}, {"words": ["what", "is", "the", "highest", "point", "in", "florida", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 florida) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,florida)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "iowa", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 iowa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,iowa)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "kansas", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 kansas) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,kansas)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "maine", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 maine) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,maine)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "montana", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 montana) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,montana)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "nevada", "in", "meters", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 nevada) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,nevada)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "new", "mexico", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 new_mexico) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,new_mexico)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "ohio", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 ohio) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,ohio)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "rhode", "island", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 rhode_island) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,rhode_island)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "states", "bordering", "georgia", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (next_to $1 georgia) (place $0) (state $1))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),state($1),next_to($1,georgia)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "texas", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 texas) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "country", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "smallest", "state", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (place $0) (smallest $1 (state $1)))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),smallest($1,state($1))))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "state", "with", "capital", "austin", "?"], "parse": "lambda $0.highest $0 (AND (capital austin) (loc $0 $1) (loc austin $1) (place $0) (state $1))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),state($1),loc(austin,$1),capital(austin)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "state", "with", "capital", "des", "moines", "?"], "parse": "lambda $0.highest $0 (AND (capital des_moines) (loc $0 $1) (loc des_moines $1) (place $0) (state $1))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),state($1),loc(des_moines,$1),capital(des_moines)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "state", "with", "the", "capital", "des", "moines", "?"], "parse": "lambda $0.highest $0 (AND (capital des_moines) (loc $0 $1) (loc des_moines $1) (place $0) (state $1))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),state($1),loc(des_moines,$1),capital(des_moines)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "state", "with", "the", "most", "rivers", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (most $1 $2 (AND (river $2) (state $1) (traverse $2 $1))) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),most($1,$2,(state($1),traverse($2,$1),river($2)))))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "state", "with", "the", "smallest", "population", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (place $0) (smallest $2 (AND (population $1 $2) (state $1))))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),smallest($2,(state($1),population($1,$2)))))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "states", "bordering", "colorado", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (next_to $1 colorado) (place $0) (state $1))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),state($1),next_to($1,colorado)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "united", "states", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "us", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "the", "usa", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "virginia", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 virginia) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,virginia)))"}, {"words": ["what", "is", "the", "highest", "point", "in", "wyoming", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 wyoming) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,wyoming)))"}, {"words": ["what", "is", "the", "highest", "point", "of", "the", "state", "with", "the", "largest", "area", "?"], "parse": "lambda $0.highest $0 (AND (largest $2 (AND (area $1 $2) (state $1))) (loc $0 $1) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),largest($2,(state($1),area($1,$2)))))"}, {"words": ["what", "is", "the", "highest", "point", "of", "the", "state", "with", "the", "smallest", "population", "density", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 $1) (place $0) (smallest $2 (AND (density $1 $2) (state $1))))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,$1),smallest($2,(state($1),density($1,$2)))))"}, {"words": ["what", "is", "the", "highest", "point", "of", "the", "usa", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "largest", "capital", "?"], "parse": "lambda $0.largest $0 (capital $0)", "parse_with_commas": "lambda $0.largest($0,capital($0))"}, {"words": ["what", "is", "the", "largest", "capital", "city", "in", "the", "usa", "?"], "parse": "lambda $0.largest $0 (AND (capital $0) (city $0) (loc $0 usa))", "parse_with_commas": "lambda $0.largest($0,(capital($0),city($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "a", "state", "that", "borders", "texas", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 $1) (next_to $1 texas) (state $1))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),state($1),next_to($1,texas)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "alabama", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 alabama))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,alabama)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "california", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 california))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,california)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "michigan", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 michigan))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,michigan)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "minnesota", "by", "population", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 minnesota) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,minnesota),population($0,$1)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "missouri", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 missouri))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,missouri)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "rhode", "island", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 rhode_island))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,rhode_island)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "smallest", "state", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 $1) (smallest $1 (AND (state $1) (traverse mississippi $1))))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),smallest($1,(state($1),traverse(mississippi,$1)))))"}, {"words": ["what", "is", "the", "largest", "city", "in", "states", "that", "border", "california", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 $1) (next_to $1 california) (state $1))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),state($1),next_to($1,california)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "texas", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 texas))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "largest", "city", "in", "the", "smallest", "state", "in", "the", "usa", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 $1) (smallest $1 (AND (loc $1 usa) (state $1))))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,$1),smallest($1,(state($1),loc($1,usa)))))"}, {"words": ["what", "is", "the", "largest", "city", "in", "wisconsin", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 wisconsin))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,wisconsin)))"}, {"words": ["what", "is", "the", "largest", "city", "of", "kansas", "?"], "parse": "lambda $0.largest $0 (AND (city $0) (loc $0 kansas))", "parse_with_commas": "lambda $0.largest($0,(city($0),loc($0,kansas)))"}, {"words": ["what", "is", "the", "largest", "of", "the", "state", "that", "the", "rio", "grande", "runs", "through", "?"], "parse": "lambda $0.largest $0 (AND (state $0) (traverse rio_grande $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),traverse(rio_grande,$0)))"}, {"words": ["what", "is", "the", "largest", "river", "in", "washington", "state", "?"], "parse": "lambda $0.largest $0 (AND (loc $0 washington) (river $0))", "parse_with_commas": "lambda $0.largest($0,(river($0),loc($0,washington)))"}, {"words": ["what", "is", "the", "largest", "state", "?"], "parse": "lambda $0.largest $0 (state $0)", "parse_with_commas": "lambda $0.largest($0,state($0))"}, {"words": ["what", "is", "the", "largest", "state", "bordering", "arkansas", "?"], "parse": "lambda $0.largest $0 (AND (next_to $0 arkansas) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,arkansas)))"}, {"words": ["what", "is", "the", "largest", "state", "bordering", "texas", "?"], "parse": "lambda $0.largest $0 (AND (next_to $0 texas) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,texas)))"}, {"words": ["what", "is", "the", "largest", "state", "capital", "in", "population", "?"], "parse": "lambda $0.largest $1 (AND (capital $2 $0) (population $0 $1) (state $2))", "parse_with_commas": "lambda $0.largest($1,(state($2),capital($2,$0),population($0,$1)))"}, {"words": ["what", "is", "the", "largest", "state", "in", "the", "us", "?"], "parse": "lambda $0.largest $0 (AND (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "largest", "state", "in", "usa", "?"], "parse": "lambda $0.largest $0 (AND (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "largest", "state", "that", "borders", "california", "?"], "parse": "lambda $0.largest $0 (AND (next_to $0 california) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,california)))"}, {"words": ["what", "is", "the", "largest", "state", "that", "borders", "texas", "?"], "parse": "lambda $0.largest $0 (AND (next_to $0 texas) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,texas)))"}, {"words": ["what", "is", "the", "largest", "state", "that", "borders", "the", "state", "with", "the", "highest", "population", "?"], "parse": "lambda $0.largest $0 (AND (largest $2 (AND (population $1 $2) (state $1))) (next_to $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,$1),largest($2,(state($1),population($1,$2)))))"}, {"words": ["what", "is", "the", "largest", "state", "that", "borders", "the", "state", "with", "the", "lowest", "point", "in", "the", "usa", "?"], "parse": "lambda $0.largest $0 (AND (loc $2 $1) (lowest $2 (AND (loc $2 usa) (place $2))) (next_to $0 $1) (state $0) (state $1))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,$1),state($1),loc($2,$1),lowest($2,(place($2),loc($2,usa)))))"}, {"words": ["what", "is", "the", "largest", "state", "traversed", "by", "the", "mississippi", "river", "?"], "parse": "lambda $0.largest $0 (AND (state $0) (traverse mississippi $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),traverse(mississippi,$0)))"}, {"words": ["what", "is", "the", "least", "populous", "state", "?"], "parse": "lambda $0.smallest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(population($0,$1),state($0)))"}, {"words": ["what", "is", "the", "length", "of", "the", "colorado", "river", "?"], "parse": "lambda $0.AND (len colorado $0) (river colorado)", "parse_with_commas": "lambda $0.(len(colorado,$0),river(colorado))"}, {"words": ["what", "is", "the", "length", "of", "the", "colorado", "river", "in", "texas", "?"], "parse": "lambda $0.AND (len colorado $0) (loc colorado texas) (river colorado)", "parse_with_commas": "lambda $0.(len(colorado,$0),river(colorado),loc(colorado,texas))"}, {"words": ["what", "is", "the", "length", "of", "the", "longest", "river", "in", "the", "usa", "?"], "parse": "lambda $0.AND (len $1 $0) (longest $1 (AND (loc $1 usa) (river $1)))", "parse_with_commas": "lambda $0.(len($1,$0),longest($1,(river($1),loc($1,usa))))"}, {"words": ["what", "is", "the", "length", "of", "the", "longest", "river", "that", "runs", "through", "texas", "?"], "parse": "lambda $0.AND (len $1 $0) (longest $1 (AND (river $1) (traverse $1 texas)))", "parse_with_commas": "lambda $0.(len($1,$0),longest($1,(river($1),traverse($1,texas))))"}, {"words": ["what", "is", "the", "length", "of", "the", "mississippi", "river", "?"], "parse": "lambda $0.AND (len mississippi $0) (river mississippi)", "parse_with_commas": "lambda $0.(len(mississippi,$0),river(mississippi))"}, {"words": ["what", "is", "the", "length", "of", "the", "river", "that", "flows", "through", "the", "most", "states", "?"], "parse": "lambda $0.AND (len $1 $0) (most $1 $2 (AND (river $1) (state $2) (traverse $1 $2)))", "parse_with_commas": "lambda $0.(len($1,$0),most($1,$2,(river($1),traverse($1,$2),state($2))))"}, {"words": ["what", "is", "the", "length", "of", "the", "river", "that", "runs", "through", "the", "most", "number", "of", "states", "?"], "parse": "lambda $0.AND (len $1 $0) (most $1 $2 (AND (river $1) (state $2) (traverse $1 $2)))", "parse_with_commas": "lambda $0.(len($1,$0),most($1,$2,(river($1),traverse($1,$2),state($2))))"}, {"words": ["what", "is", "the", "length", "of", "the", "river", "that", "runs", "through", "the", "most", "states", "?"], "parse": "lambda $0.AND (len $1 $0) (most $1 $2 (AND (river $1) (state $2) (traverse $1 $2)))", "parse_with_commas": "lambda $0.(len($1,$0),most($1,$2,(river($1),traverse($1,$2),state($2))))"}, {"words": ["what", "is", "the", "length", "of", "the", "river", "that", "traverses", "the", "most", "states", "?"], "parse": "lambda $0.AND (len $1 $0) (most $1 $2 (AND (river $1) (state $2) (traverse $1 $2)))", "parse_with_commas": "lambda $0.(len($1,$0),most($1,$2,(river($1),traverse($1,$2),state($2))))"}, {"words": ["what", "is", "the", "longest", "river", "?"], "parse": "lambda $0.longest $0 (river $0)", "parse_with_commas": "lambda $0.longest($0,river($0))"}, {"words": ["what", "is", "the", "longest", "river", "flowing", "through", "new", "york", "?"], "parse": "lambda $0.longest $0 (AND (river $0) (traverse $0 new_york))", "parse_with_commas": "lambda $0.longest($0,(river($0),traverse($0,new_york)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "america", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "california", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 california) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,california)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "florida", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 florida) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,florida)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "mississippi", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 mississippi) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,mississippi)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "new", "york", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 new_york) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,new_york)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "pennsylvania", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 pennsylvania) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,pennsylvania)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "texas", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 texas) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "largest", "state", "?"], "parse": "lambda $0.longest $0 (AND (largest $1 (state $1)) (loc $0 $1) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,$1),largest($1,state($1))))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "smallest", "state", "in", "the", "usa", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 $1) (river $0) (smallest $1 (AND (loc $1 usa) (state $1))))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,$1),smallest($1,(state($1),loc($1,usa)))))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "state", "with", "the", "highest", "point", "?"], "parse": "lambda $0.longest $0 (AND (highest $2 (place $2)) (loc $0 $1) (loc $2 $1) (river $0) (state $1))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,$1),state($1),loc($2,$1),highest($2,place($2))))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "state", "with", "the", "most", "major", "cities", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 $1) (most $1 $2 (AND (city $2) (loc $2 $1) (major $2) (state $1))) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,$1),most($1,$2,(state($1),loc($2,$1),major($2),city($2)))))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "states", "that", "border", "nebraska", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 $1) (next_to $1 nebraska) (river $0) (state $1))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,$1),state($1),next_to($1,nebraska)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "united", "states", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "longest", "river", "in", "the", "us", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "longest", "river", "that", "does", "not", "run", "through", "texas", "?"], "parse": "lambda $0.longest $0 (AND (not  traverse $0 texas) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),not (traverse($0,texas))))"}, {"words": ["what", "is", "the", "longest", "river", "that", "flows", "through", "a", "state", "that", "borders", "indiana", "?"], "parse": "lambda $0.longest $0 (AND (next_to $1 indiana) (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.longest($0,(river($0),traverse($0,$1),state($1),next_to($1,indiana)))"}, {"words": ["what", "is", "the", "longest", "river", "that", "flows", "through", "colorado", "?"], "parse": "lambda $0.longest $0 (AND (river $0) (traverse $0 colorado))", "parse_with_commas": "lambda $0.longest($0,(river($0),traverse($0,colorado)))"}, {"words": ["what", "is", "the", "longest", "river", "that", "passes", "the", "states", "that", "border", "the", "state", "that", "borders", "the", "most", "states", "?"], "parse": "lambda $0.longest $0 (AND (most $2 $3 (AND (next_to $2 $3) (state $2) (state $3))) (next_to $1 $2) (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.longest($0,(river($0),traverse($0,$1),state($1),next_to($1,$2),most($2,$3,(state($2),next_to($2,$3),state($3)))))"}, {"words": ["what", "is", "the", "longest", "river", "that", "runs", "through", "a", "state", "that", "borders", "tennessee", "?"], "parse": "lambda $0.longest $0 (AND (next_to $1 tennessee) (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.longest($0,(river($0),traverse($0,$1),state($1),next_to($1,tennessee)))"}, {"words": ["what", "is", "the", "lowest", "elevation", "in", "pennsylvania", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 pennsylvania) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,pennsylvania)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "arkansas", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 arkansas) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,arkansas)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "california", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 california) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,california)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "louisiana", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 louisiana) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,louisiana)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "massachusetts", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 massachusetts) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,massachusetts)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "mississippi", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 mississippi) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,mississippi)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "nebraska", "in", "meters", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 nebraska) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,nebraska)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "oregon", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 oregon) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,oregon)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "texas", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 texas) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "the", "state", "of", "california", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 california) (place $0) (state california))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,california),state(california)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "the", "state", "of", "texas", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 texas) (place $0) (state texas))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,texas),state(texas)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "the", "united", "states", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "usa", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "lowest", "point", "in", "wisconsin", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 wisconsin) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,wisconsin)))"}, {"words": ["what", "is", "the", "lowest", "point", "of", "all", "states", "through", "which", "the", "colorado", "river", "runs", "through", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 $1) (place $0) (river colorado) (state $1) (traverse colorado $1))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,$1),state($1),river(colorado),traverse(colorado,$1)))"}, {"words": ["what", "is", "the", "lowest", "point", "of", "colorado", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 colorado) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,colorado)))"}, {"words": ["what", "is", "the", "lowest", "point", "of", "the", "state", "with", "the", "largest", "area", "?"], "parse": "lambda $0.lowest $0 (AND (largest $2 (AND (area $1 $2) (state $1))) (loc $0 $1) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,$1),largest($2,(state($1),area($1,$2)))))"}, {"words": ["what", "is", "the", "lowest", "point", "of", "the", "us", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "major", "cities", "in", "montana", "?"], "parse": "lambda $0.AND (city $0) (loc $0 montana) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,montana))"}, {"words": ["what", "is", "the", "maximum", "elevation", "of", "san", "francisco", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 san_francisco) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,san_francisco)))"}, {"words": ["what", "is", "the", "most", "dense", "state", "in", "the", "usa", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.largest($1,(density($0,$1),state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "most", "populated", "capital", "in", "the", "usa", "?"], "parse": "lambda $0.largest $1 (AND (capital $0) (loc $0 usa) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),capital($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "most", "populated", "state", "bordering", "oklahoma", "?"], "parse": "lambda $0.largest $1 (AND (next_to $0 oklahoma) (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),state($0),next_to($0,oklahoma)))"}, {"words": ["what", "is", "the", "most", "populous", "city", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),city($0)))"}, {"words": ["what", "is", "the", "most", "populous", "city", "in", "texas", "?"], "parse": "lambda $0.largest $0 (AND (city $1) (loc $1 texas) (population $1 $0))", "parse_with_commas": "lambda $0.largest($0,(population($1,$0),city($1),loc($1,texas)))"}, {"words": ["what", "is", "the", "most", "populous", "city", "in", "wyoming", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 wyoming) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),city($0),loc($0,wyoming)))"}, {"words": ["what", "is", "the", "most", "populous", "state", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),state($0)))"}, {"words": ["what", "is", "the", "most", "populous", "state", "in", "the", "us", "?"], "parse": "lambda $0.largest $1 (AND (loc $0 usa) (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "most", "populous", "state", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0) (traverse mississippi $0))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),state($0),traverse(mississippi,$0)))"}, {"words": ["what", "is", "the", "name", "of", "the", "state", "with", "the", "lowest", "point", "?"], "parse": "lambda $0.AND (loc $1 $0) (lowest $1 (place $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),lowest($1,place($1)))"}, {"words": ["what", "is", "the", "number", "of", "neighboring", "states", "for", "kentucky", "?"], "parse": "lambda $0.count $1 (AND (next_to $1 kentucky) (state $1)) $0", "parse_with_commas": "lambda $0.count($1,(state($1),next_to($1,kentucky)),$0)"}, {"words": ["what", "is", "the", "population", "density", "in", "the", "state", "with", "capital", "austin", "?"], "parse": "lambda $0.AND (capital austin) (density $1 $0) (loc austin $1) (state $1)", "parse_with_commas": "lambda $0.(density($1,$0),state($1),loc(austin,$1),capital(austin))"}, {"words": ["what", "is", "the", "population", "density", "of", "maine", "?"], "parse": "lambda $0.density maine $0", "parse_with_commas": "lambda $0.density(maine,$0)"}, {"words": ["what", "is", "the", "population", "density", "of", "south", "dakota", "?"], "parse": "lambda $0.density south_dakota $0", "parse_with_commas": "lambda $0.density(south_dakota,$0)"}, {"words": ["what", "is", "the", "population", "density", "of", "texas", "?"], "parse": "lambda $0.density texas $0", "parse_with_commas": "lambda $0.density(texas,$0)"}, {"words": ["what", "is", "the", "population", "density", "of", "the", "largest", "state", "?"], "parse": "lambda $0.AND (density $1 $0) (largest $1 (state $1))", "parse_with_commas": "lambda $0.(density($1,$0),largest($1,state($1)))"}, {"words": ["what", "is", "the", "population", "density", "of", "the", "smallest", "state", "?"], "parse": "lambda $0.AND (density $1 $0) (smallest $1 (state $1))", "parse_with_commas": "lambda $0.(density($1,$0),smallest($1,state($1)))"}, {"words": ["what", "is", "the", "population", "density", "of", "the", "state", "with", "the", "smallest", "area", "?"], "parse": "lambda $0.AND (density $1 $0) (smallest $2 (AND (area $1 $2) (state $1)))", "parse_with_commas": "lambda $0.(density($1,$0),smallest($2,(state($1),area($1,$2))))"}, {"words": ["what", "is", "the", "population", "density", "of", "the", "state", "with", "the", "smallest", "population", "?"], "parse": "lambda $0.AND (density $1 $0) (smallest $2 (AND (population $1 $2) (state $1)))", "parse_with_commas": "lambda $0.(density($1,$0),smallest($2,(state($1),population($1,$2))))"}, {"words": ["what", "is", "the", "population", "density", "of", "wyoming", "?"], "parse": "lambda $0.density wyoming $0", "parse_with_commas": "lambda $0.density(wyoming,$0)"}, {"words": ["what", "is", "the", "population", "in", "boston", "?"], "parse": "lambda $0.population boston $0", "parse_with_commas": "lambda $0.population(boston,$0)"}, {"words": ["what", "is", "the", "population", "of", "alaska", "?"], "parse": "lambda $0.population alaska $0", "parse_with_commas": "lambda $0.population(alaska,$0)"}, {"words": ["what", "is", "the", "population", "of", "arizona", "?"], "parse": "lambda $0.population arizona $0", "parse_with_commas": "lambda $0.population(arizona,$0)"}, {"words": ["what", "is", "the", "population", "of", "atlanta", "?"], "parse": "lambda $0.population atlanta $0", "parse_with_commas": "lambda $0.population(atlanta,$0)"}, {"words": ["what", "is", "the", "population", "of", "atlanta", "ga", "?"], "parse": "lambda $0.population atlanta $0", "parse_with_commas": "lambda $0.population(atlanta,$0)"}, {"words": ["what", "is", "the", "population", "of", "austin", "?"], "parse": "lambda $0.population austin $0", "parse_with_commas": "lambda $0.population(austin,$0)"}, {"words": ["what", "is", "the", "population", "of", "austin", "texas", "?"], "parse": "lambda $0.population austin $0", "parse_with_commas": "lambda $0.population(austin,$0)"}, {"words": ["what", "is", "the", "population", "of", "boston", "massachusetts", "?"], "parse": "lambda $0.population boston $0", "parse_with_commas": "lambda $0.population(boston,$0)"}, {"words": ["what", "is", "the", "population", "of", "boulder", "?"], "parse": "lambda $0.population boulder $0", "parse_with_commas": "lambda $0.population(boulder,$0)"}, {"words": ["what", "is", "the", "population", "of", "california", "?"], "parse": "lambda $0.population california $0", "parse_with_commas": "lambda $0.population(california,$0)"}, {"words": ["what", "is", "the", "population", "of", "dallas", "?"], "parse": "lambda $0.population dallas $0", "parse_with_commas": "lambda $0.population(dallas,$0)"}, {"words": ["what", "is", "the", "population", "of", "denver", "?"], "parse": "lambda $0.population denver $0", "parse_with_commas": "lambda $0.population(denver,$0)"}, {"words": ["what", "is", "the", "population", "of", "erie", "pennsylvania", "?"], "parse": "lambda $0.population erie $0", "parse_with_commas": "lambda $0.population(erie,$0)"}, {"words": ["what", "is", "the", "population", "of", "hawaii", "?"], "parse": "lambda $0.population hawaii $0", "parse_with_commas": "lambda $0.population(hawaii,$0)"}, {"words": ["what", "is", "the", "population", "of", "houston", "?"], "parse": "lambda $0.population houston $0", "parse_with_commas": "lambda $0.population(houston,$0)"}, {"words": ["what", "is", "the", "population", "of", "idaho", "?"], "parse": "lambda $0.population idaho $0", "parse_with_commas": "lambda $0.population(idaho,$0)"}, {"words": ["what", "is", "the", "population", "of", "illinois", "?"], "parse": "lambda $0.population illinois $0", "parse_with_commas": "lambda $0.population(illinois,$0)"}, {"words": ["what", "is", "the", "population", "of", "maine", "?"], "parse": "lambda $0.population maine $0", "parse_with_commas": "lambda $0.population(maine,$0)"}, {"words": ["what", "is", "the", "population", "of", "maryland", "?"], "parse": "lambda $0.population maryland $0", "parse_with_commas": "lambda $0.population(maryland,$0)"}, {"words": ["what", "is", "the", "population", "of", "minnesota", "?"], "parse": "lambda $0.population minnesota $0", "parse_with_commas": "lambda $0.population(minnesota,$0)"}, {"words": ["what", "is", "the", "population", "of", "montana", "?"], "parse": "lambda $0.population montana $0", "parse_with_commas": "lambda $0.population(montana,$0)"}, {"words": ["what", "is", "the", "population", "of", "new", "mexico", "?"], "parse": "lambda $0.population new_mexico $0", "parse_with_commas": "lambda $0.population(new_mexico,$0)"}, {"words": ["what", "is", "the", "population", "of", "new", "york", "?"], "parse": "lambda $0.population new_york $0", "parse_with_commas": "lambda $0.population(new_york,$0)"}, {"words": ["what", "is", "the", "population", "of", "new", "york", "city", "?"], "parse": "lambda $0.population new_york $0", "parse_with_commas": "lambda $0.population(new_york,$0)"}, {"words": ["what", "is", "the", "population", "of", "oregon", "?"], "parse": "lambda $0.population oregon $0", "parse_with_commas": "lambda $0.population(oregon,$0)"}, {"words": ["what", "is", "the", "population", "of", "portland", "maine", "?"], "parse": "lambda $0.population portland $0", "parse_with_commas": "lambda $0.population(portland,$0)"}, {"words": ["what", "is", "the", "population", "of", "rhode", "island", "?"], "parse": "lambda $0.population rhode_island $0", "parse_with_commas": "lambda $0.population(rhode_island,$0)"}, {"words": ["what", "is", "the", "population", "of", "sacramento", "?"], "parse": "lambda $0.population sacramento $0", "parse_with_commas": "lambda $0.population(sacramento,$0)"}, {"words": ["what", "is", "the", "population", "of", "san", "antonio", "?"], "parse": "lambda $0.population san_antonio $0", "parse_with_commas": "lambda $0.population(san_antonio,$0)"}, {"words": ["what", "is", "the", "population", "of", "seattle", "?"], "parse": "lambda $0.population seattle $0", "parse_with_commas": "lambda $0.population(seattle,$0)"}, {"words": ["what", "is", "the", "population", "of", "seattle", "washington", "?"], "parse": "lambda $0.population seattle $0", "parse_with_commas": "lambda $0.population(seattle,$0)"}, {"words": ["what", "is", "the", "population", "of", "south", "dakota", "?"], "parse": "lambda $0.population south_dakota $0", "parse_with_commas": "lambda $0.population(south_dakota,$0)"}, {"words": ["what", "is", "the", "population", "of", "springfield", "missouri", "?"], "parse": "lambda $0.population springfield $0", "parse_with_commas": "lambda $0.population(springfield,$0)"}, {"words": ["what", "is", "the", "population", "of", "springfield", "south", "dakota", "?"], "parse": "lambda $0.population springfield $0", "parse_with_commas": "lambda $0.population(springfield,$0)"}, {"words": ["what", "is", "the", "population", "of", "tempe", "arizona", "?"], "parse": "lambda $0.population tempe $0", "parse_with_commas": "lambda $0.population(tempe,$0)"}, {"words": ["what", "is", "the", "population", "of", "texas", "?"], "parse": "lambda $0.population texas $0", "parse_with_commas": "lambda $0.population(texas,$0)"}, {"words": ["what", "is", "the", "population", "of", "the", "capital", "of", "the", "largest", "state", "?"], "parse": "lambda $0.AND (capital $1) (largest $2 (state $2)) (loc $1 $2) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),capital($1),loc($1,$2),largest($2,state($2)))"}, {"words": ["what", "is", "the", "population", "of", "the", "capital", "of", "the", "largest", "state", "through", "which", "the", "mississippi", "runs", "?"], "parse": "lambda $0.AND (capital $1) (largest $2 (AND (state $2) (traverse mississippi $2))) (loc $1 $2) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),capital($1),loc($1,$2),largest($2,(state($2),traverse(mississippi,$2))))"}, {"words": ["what", "is", "the", "population", "of", "the", "capital", "of", "the", "smallest", "state", "?"], "parse": "lambda $0.AND (capital $1) (loc $1 $2) (population $1 $0) (smallest $2 (state $2))", "parse_with_commas": "lambda $0.(population($1,$0),capital($1),loc($1,$2),smallest($2,state($2)))"}, {"words": ["what", "is", "the", "population", "of", "the", "largest", "city", "in", "the", "state", "with", "the", "largest", "area", "?"], "parse": "lambda $0.AND (largest $1 (AND (city $1) (largest $3 (AND (area $2 $3) (state $2))) (loc $1 $2))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($1,(city($1),loc($1,$2),largest($3,(state($2),area($2,$3))))))"}, {"words": ["what", "is", "the", "population", "of", "the", "largest", "state", "?"], "parse": "lambda $0.AND (largest $1 (state $1)) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($1,state($1)))"}, {"words": ["what", "is", "the", "population", "of", "the", "largest", "state", "that", "borders", "texas", "?"], "parse": "lambda $0.AND (largest $1 (AND (next_to $1 texas) (state $1))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($1,(state($1),next_to($1,texas))))"}, {"words": ["what", "is", "the", "population", "of", "the", "major", "cities", "in", "wisconsin", "?"], "parse": "lambda $0.AND (city $1) (loc $1 wisconsin) (major $1) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),major($1),city($1),loc($1,wisconsin))"}, {"words": ["what", "is", "the", "population", "of", "the", "smallest", "state", "?"], "parse": "lambda $0.smallest $1 (AND (population $1 $0) (state $1))", "parse_with_commas": "lambda $0.smallest($1,(population($1,$0),state($1)))"}, {"words": ["what", "is", "the", "population", "of", "the", "state", "that", "borders", "the", "most", "states", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (next_to $1 $2) (state $1) (state $2))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),most($1,$2,(state($1),next_to($1,$2),state($2))))"}, {"words": ["what", "is", "the", "population", "of", "the", "state", "with", "the", "highest", "population", "density", "?"], "parse": "lambda $0.AND (largest $2 (AND (density $1 $2) (state $1))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($2,(state($1),density($1,$2))))"}, {"words": ["what", "is", "the", "population", "of", "the", "state", "with", "the", "largest", "area", "?"], "parse": "lambda $0.AND (largest $2 (AND (area $1 $2) (state $1))) (population $1 $0)", "parse_with_commas": "lambda $0.(population($1,$0),largest($2,(state($1),area($1,$2))))"}, {"words": ["what", "is", "the", "population", "of", "tucson", "?"], "parse": "lambda $0.population tucson $0", "parse_with_commas": "lambda $0.population(tucson,$0)"}, {"words": ["what", "is", "the", "population", "of", "utah", "?"], "parse": "lambda $0.population utah $0", "parse_with_commas": "lambda $0.population(utah,$0)"}, {"words": ["what", "is", "the", "population", "of", "washington", "?"], "parse": "lambda $0.population washington $0", "parse_with_commas": "lambda $0.population(washington,$0)"}, {"words": ["what", "is", "the", "population", "of", "washington", "dc", "?"], "parse": "lambda $0.population washington $0", "parse_with_commas": "lambda $0.population(washington,$0)"}, {"words": ["what", "is", "the", "river", "that", "cross", "over", "ohio", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 ohio)", "parse_with_commas": "lambda $0.(river($0),traverse($0,ohio))"}, {"words": ["what", "is", "the", "shortest", "river", "?"], "parse": "lambda $0.shortest $0 (river $0)", "parse_with_commas": "lambda $0.shortest($0,river($0))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "alaska", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 alaska) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,alaska)))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "iowa", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 iowa) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,iowa)))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "nebraska", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 nebraska) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,nebraska)))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "texas", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 texas) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,texas)))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "the", "united", "states", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "the", "us", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "shortest", "river", "in", "the", "usa", "?"], "parse": "lambda $0.shortest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.shortest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "size", "of", "california", "?"], "parse": "lambda $0.size california $0", "parse_with_commas": "lambda $0.size(california,$0)"}, {"words": ["what", "is", "the", "size", "of", "florida", "?"], "parse": "lambda $0.size florida $0", "parse_with_commas": "lambda $0.size(florida,$0)"}, {"words": ["what", "is", "the", "size", "of", "texas", "?"], "parse": "lambda $0.size texas $0", "parse_with_commas": "lambda $0.size(texas,$0)"}, {"words": ["what", "is", "the", "size", "of", "the", "capital", "of", "texas", "?"], "parse": "lambda $0.AND (capital $1) (loc $1 texas) (size $1 $0)", "parse_with_commas": "lambda $0.(size($1,$0),capital($1),loc($1,texas))"}, {"words": ["what", "is", "the", "size", "of", "the", "largest", "state", "in", "the", "usa", "?"], "parse": "lambda $0.AND (largest $1 (AND (loc $1 usa) (state $1))) (size $1 $0)", "parse_with_commas": "lambda $0.(size($1,$0),largest($1,(state($1),loc($1,usa))))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "alaska", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 alaska))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,alaska)))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "arkansas", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 arkansas))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,arkansas)))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "hawaii", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 hawaii))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,hawaii)))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "the", "largest", "state", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (largest $1 (state $1)) (loc $0 $1))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,$1),largest($1,state($1))))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "the", "us", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 usa))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "the", "usa", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 usa))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "smallest", "city", "in", "washington", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 washington))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,washington)))"}, {"words": ["what", "is", "the", "smallest", "city", "of", "the", "smallest", "state", "in", "the", "us", "?"], "parse": "lambda $0.smallest $0 (AND (city $0) (loc $0 $1) (smallest $1 (AND (loc $1 usa) (state $1))))", "parse_with_commas": "lambda $0.smallest($0,(city($0),loc($0,$1),smallest($1,(state($1),loc($1,usa)))))"}, {"words": ["what", "is", "the", "smallest", "state", "bordering", "ohio", "?"], "parse": "lambda $0.smallest $0 (AND (next_to $0 ohio) (state $0))", "parse_with_commas": "lambda $0.smallest($0,(state($0),next_to($0,ohio)))"}, {"words": ["what", "is", "the", "smallest", "state", "bordering", "wyoming", "?"], "parse": "lambda $0.smallest $0 (AND (next_to $0 wyoming) (state $0))", "parse_with_commas": "lambda $0.smallest($0,(state($0),next_to($0,wyoming)))"}, {"words": ["what", "is", "the", "smallest", "state", "by", "area", "?"], "parse": "lambda $0.smallest $1 (AND (area $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),area($0,$1)))"}, {"words": ["what", "is", "the", "smallest", "state", "in", "the", "usa", "?"], "parse": "lambda $0.smallest $0 (AND (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.smallest($0,(state($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "smallest", "state", "that", "borders", "texas", "?"], "parse": "lambda $0.smallest $0 (AND (next_to $0 texas) (state $0))", "parse_with_commas": "lambda $0.smallest($0,(state($0),next_to($0,texas)))"}, {"words": ["what", "is", "the", "smallest", "state", "that", "borders", "the", "most", "states", "?"], "parse": "lambda $0.smallest $0 (most $0 $1 (AND (next_to $0 $1) (state $0) (state $1)))", "parse_with_commas": "lambda $0.smallest($0,most($0,$1,(state($0),next_to($0,$1),state($1))))"}, {"words": ["what", "is", "the", "smallest", "state", "that", "the", "mississippi", "river", "runs", "through", "?"], "parse": "lambda $0.smallest $0 (AND (river mississippi) (state $0) (traverse mississippi $0))", "parse_with_commas": "lambda $0.smallest($0,(state($0),river(mississippi),traverse(mississippi,$0)))"}, {"words": ["what", "is", "the", "smallest", "state", "through", "which", "the", "longest", "river", "runs", "?"], "parse": "lambda $0.smallest $0 (AND (longest $1 (river $1)) (state $0) (traverse $1 $0))", "parse_with_commas": "lambda $0.smallest($0,(state($0),longest($1,river($1)),traverse($1,$0)))"}, {"words": ["what", "is", "the", "state", "that", "contains", "the", "highest", "point", "?"], "parse": "lambda $0.AND (highest $1 (place $1)) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),highest($1,place($1)))"}, {"words": ["what", "is", "the", "state", "with", "the", "highest", "elevation", "in", "the", "united", "states", "?"], "parse": "lambda $0.AND (highest $1 (AND (loc $1 usa) (place $1))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),highest($1,(place($1),loc($1,usa))))"}, {"words": ["what", "is", "the", "state", "with", "the", "largest", "area", "?"], "parse": "lambda $0.largest $1 (AND (area $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),area($0,$1)))"}, {"words": ["what", "is", "the", "state", "with", "the", "largest", "density", "in", "usa", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (loc $0 usa) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1),loc($0,usa)))"}, {"words": ["what", "is", "the", "state", "with", "the", "largest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["what", "is", "the", "state", "with", "the", "lowest", "point", "?"], "parse": "lambda $0.AND (loc $1 $0) (lowest $1 (place $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),lowest($1,place($1)))"}, {"words": ["what", "is", "the", "state", "with", "the", "lowest", "population", "?"], "parse": "lambda $0.smallest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),population($0,$1)))"}, {"words": ["what", "is", "the", "state", "with", "the", "lowest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["what", "is", "the", "state", "with", "the", "smallest", "area", "?"], "parse": "lambda $0.smallest $1 (AND (area $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),area($0,$1)))"}, {"words": ["what", "is", "the", "tallest", "mountain", "in", "america", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "tallest", "mountain", "in", "the", "united", "states", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,usa)))"}, {"words": ["what", "is", "the", "total", "area", "of", "the", "usa", "?"], "parse": "lambda $0.area usa $0", "parse_with_commas": "lambda $0.area(usa,$0)"}, {"words": ["what", "is", "the", "total", "length", "of", "all", "rivers", "in", "the", "usa", "?"], "parse": "lambda $0.sum $1 (AND (len $2 $1) (river $2)) $0", "parse_with_commas": "lambda $0.sum($1,(len($2,$1),river($2)),$0)"}, {"words": ["what", "is", "the", "total", "population", "of", "the", "states", "that", "border", "texas", "?"], "parse": "lambda $0.sum $1 (AND (next_to texas $2) (population $2 $1) (state $2)) $0", "parse_with_commas": "lambda $0.sum($1,(population($2,$1),state($2),next_to(texas,$2)),$0)"}, {"words": ["what", "length", "is", "the", "mississippi", "?"], "parse": "lambda $0.len mississippi $0", "parse_with_commas": "lambda $0.len(mississippi,$0)"}, {"words": ["what", "major", "cities", "are", "located", "in", "pennsylvania", "?"], "parse": "lambda $0.AND (city $0) (loc $0 pennsylvania) (major $0)", "parse_with_commas": "lambda $0.(major($0),city($0),loc($0,pennsylvania))"}, {"words": ["what", "major", "rivers", "run", "through", "illinois", "?"], "parse": "lambda $0.AND (major $0) (river $0) (traverse $0 illinois)", "parse_with_commas": "lambda $0.(major($0),river($0),traverse($0,illinois))"}, {"words": ["what", "mountains", "are", "in", "alaska", "?"], "parse": "lambda $0.AND (loc $0 alaska) (mountain $0)", "parse_with_commas": "lambda $0.(mountain($0),loc($0,alaska))"}, {"words": ["what", "river", "flows", "through", "kansas", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 kansas)", "parse_with_commas": "lambda $0.(river($0),traverse($0,kansas))"}, {"words": ["what", "river", "flows", "through", "texas", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 texas)", "parse_with_commas": "lambda $0.(river($0),traverse($0,texas))"}, {"words": ["what", "river", "flows", "through", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["what", "river", "is", "the", "longest", "one", "in", "the", "united", "states", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,usa)))"}, {"words": ["what", "river", "runs", "through", "illinois", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 illinois)", "parse_with_commas": "lambda $0.(river($0),traverse($0,illinois))"}, {"words": ["what", "river", "runs", "through", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["what", "river", "runs", "through", "the", "state", "with", "the", "most", "cities", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (city $2) (loc $2 $1) (state $1))) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),most($1,$2,(state($1),loc($2,$1),city($2))))"}, {"words": ["what", "river", "runs", "through", "virginia", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 virginia)", "parse_with_commas": "lambda $0.(river($0),traverse($0,virginia))"}, {"words": ["what", "river", "traverses", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["what", "river", "traverses", "the", "state", "which", "borders", "the", "most", "states", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (next_to $1 $2) (state $1) (state $2))) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),most($1,$2,(state($1),next_to($1,$2),state($2))))"}, {"words": ["what", "rivers", "are", "in", "nevada", "?"], "parse": "lambda $0.AND (loc $0 nevada) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,nevada))"}, {"words": ["what", "rivers", "are", "in", "new", "mexico", "?"], "parse": "lambda $0.AND (loc $0 new_mexico) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,new_mexico))"}, {"words": ["what", "rivers", "are", "in", "oregon", "?"], "parse": "lambda $0.AND (loc $0 oregon) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,oregon))"}, {"words": ["what", "rivers", "are", "in", "states", "that", "border", "texas", "?"], "parse": "lambda $0.AND (loc $0 $1) (next_to $1 texas) (river $0) (state $1)", "parse_with_commas": "lambda $0.(river($0),loc($0,$1),state($1),next_to($1,texas))"}, {"words": ["what", "rivers", "are", "in", "texas", "?"], "parse": "lambda $0.AND (loc $0 texas) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,texas))"}, {"words": ["what", "rivers", "are", "in", "utah", "?"], "parse": "lambda $0.AND (loc $0 utah) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,utah))"}, {"words": ["what", "rivers", "are", "there", "in", "texas", "?"], "parse": "lambda $0.AND (loc $0 texas) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,texas))"}, {"words": ["what", "rivers", "do", "not", "run", "through", "tennessee", "?"], "parse": "lambda $0.AND (not  traverse $0 tennessee) (river $0)", "parse_with_commas": "lambda $0.(river($0),not (traverse($0,tennessee)))"}, {"words": ["what", "rivers", "flow", "though", "colorado", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 colorado)", "parse_with_commas": "lambda $0.(river($0),traverse($0,colorado))"}, {"words": ["what", "rivers", "flow", "through", "missouri", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 missouri)", "parse_with_commas": "lambda $0.(river($0),traverse($0,missouri))"}, {"words": ["what", "rivers", "flow", "through", "states", "that", "alabama", "borders", "?"], "parse": "lambda $0.AND (next_to alabama $1) (river $0) (state $1) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),next_to(alabama,$1))"}, {"words": ["what", "rivers", "flow", "through", "states", "that", "border", "the", "state", "with", "the", "largest", "population", "?"], "parse": "lambda $0.AND (largest $3 (AND (population $2 $3) (state $2))) (next_to $1 $2) (river $0) (state $1) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),next_to($1,$2),largest($3,(state($2),population($2,$3))))"}, {"words": ["what", "rivers", "flow", "through", "the", "largest", "state", "?"], "parse": "lambda $0.AND (largest $1 (state $1)) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),largest($1,state($1)))"}, {"words": ["what", "rivers", "flow", "through", "the", "state", "with", "the", "largest", "population", "?"], "parse": "lambda $0.AND (largest $2 (AND (population $1 $2) (state $1))) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),largest($2,(state($1),population($1,$2))))"}, {"words": ["what", "rivers", "run", "through", "arizona", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 arizona)", "parse_with_commas": "lambda $0.(river($0),traverse($0,arizona))"}, {"words": ["what", "rivers", "run", "through", "austin", "texas", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 austin)", "parse_with_commas": "lambda $0.(river($0),traverse($0,austin))"}, {"words": ["what", "rivers", "run", "through", "colorado", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 colorado)", "parse_with_commas": "lambda $0.(river($0),traverse($0,colorado))"}, {"words": ["what", "rivers", "run", "through", "louisiana", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 louisiana)", "parse_with_commas": "lambda $0.(river($0),traverse($0,louisiana))"}, {"words": ["what", "rivers", "run", "through", "maine", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 maine)", "parse_with_commas": "lambda $0.(river($0),traverse($0,maine))"}, {"words": ["what", "rivers", "run", "through", "new", "york", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 new_york)", "parse_with_commas": "lambda $0.(river($0),traverse($0,new_york))"}, {"words": ["what", "rivers", "run", "through", "the", "state", "with", "the", "lowest", "point", "in", "the", "usa", "?"], "parse": "lambda $0.AND (loc $2 $1) (lowest $2 (AND (loc $2 usa) (place $2))) (river $0) (state $1) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),loc($2,$1),lowest($2,(place($2),loc($2,usa))))"}, {"words": ["what", "rivers", "run", "through", "the", "states", "that", "border", "the", "state", "with", "the", "capital", "atlanta", "?"], "parse": "lambda $0.AND (capital atlanta) (loc atlanta $2) (next_to $1 $2) (river $0) (state $1) (state $2) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),next_to($1,$2),state($2),loc(atlanta,$2),capital(atlanta))"}, {"words": ["what", "rivers", "run", "through", "west", "virginia", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 west_virginia)", "parse_with_commas": "lambda $0.(river($0),traverse($0,west_virginia))"}, {"words": ["what", "rivers", "traverses", "the", "state", "which", "borders", "the", "most", "states", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (next_to $1 $2) (state $1) (state $2))) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),most($1,$2,(state($1),next_to($1,$2),state($2))))"}, {"words": ["what", "state", "bordering", "nevada", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (next_to $0 nevada) (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),next_to($0,nevada),population($0,$1)))"}, {"words": ["what", "state", "borders", "michigan", "?"], "parse": "lambda $0.AND (next_to $0 michigan) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,michigan))"}, {"words": ["what", "state", "borders", "most", "other", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (next_to $0 $1) (state $0) (state $1))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),next_to($0,$1),state($1)))"}, {"words": ["what", "state", "borders", "new", "york", "?"], "parse": "lambda $0.AND (next_to $0 new_york) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,new_york))"}, {"words": ["what", "state", "borders", "the", "least", "states", "?"], "parse": "lambda $0.fewest $0 $1 (AND (next_to $0 $1) (state $0) (state $1))", "parse_with_commas": "lambda $0.fewest($0,$1,(state($0),next_to($0,$1),state($1)))"}, {"words": ["what", "state", "borders", "the", "least", "states", "excluding", "alaska", "and", "excluding", "hawaii", "?"], "parse": "lambda $0.fewest alaska $1 (AND (next_to alaska $1) (notnotconst alaska (stateid hawaii)) (state alaska))", "parse_with_commas": "lambda $0.fewest(alaska,$1,(state(alaska),next_to(alaska,$1),notnotconst(alaska,stateid(hawaii))))"}, {"words": ["what", "state", "borders", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (next_to $0 $1) (state $0) (state $1))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),next_to($0,$1),state($1)))"}, {"words": ["what", "state", "borders", "the", "state", "with", "the", "smallest", "population", "?"], "parse": "lambda $0.AND (next_to $0 $1) (smallest $2 (AND (population $1 $2) (state $1))) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),smallest($2,(state($1),population($1,$2))))"}, {"words": ["what", "state", "contains", "the", "highest", "point", "in", "the", "us", "?"], "parse": "lambda $0.AND (highest $1 (AND (loc $1 usa) (place $1))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),highest($1,(place($1),loc($1,usa))))"}, {"words": ["what", "state", "contains", "the", "highest", "point", "of", "those", "the", "colorado", "river", "traverses", "?"], "parse": "lambda $0.AND (highest $1 (AND (loc $1 $2) (place $1) (river colorado) (state $2) (traverse colorado $2))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),highest($1,(place($1),loc($1,$2),state($2),river(colorado),traverse(colorado,$2))))"}, {"words": ["what", "state", "has", "highest", "elevation", "?"], "parse": "lambda $0.AND (highest $1 (place $1)) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),highest($1,place($1)))"}, {"words": ["what", "state", "has", "no", "rivers", "?"], "parse": "lambda $0.AND (not  loc $1 $0 (river $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),not (loc($1,$0),river($1)))"}, {"words": ["what", "state", "has", "the", "capital", "salem", "?"], "parse": "lambda $0.AND (capital salem) (loc salem $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(salem,$0),capital(salem))"}, {"words": ["what", "state", "has", "the", "city", "flint", "?"], "parse": "lambda $0.AND (city flint) (loc flint $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(flint,$0),city(flint))"}, {"words": ["what", "state", "has", "the", "city", "with", "the", "largest", "population", "?"], "parse": "lambda $0.AND (largest $2 (AND (city $1) (population $1 $2))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),largest($2,(city($1),population($1,$2))))"}, {"words": ["what", "state", "has", "the", "city", "with", "the", "most", "population", "?"], "parse": "lambda $0.AND (largest $2 (AND (city $1) (population $1 $2))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),largest($2,(city($1),population($1,$2))))"}, {"words": ["what", "state", "has", "the", "greatest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "has", "the", "highest", "elevation", "?"], "parse": "lambda $0.highest $1 (AND (loc $1 $0) (place $1) (state $0))", "parse_with_commas": "lambda $0.highest($1,(state($0),loc($1,$0),place($1)))"}, {"words": ["what", "state", "has", "the", "highest", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "has", "the", "highest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "has", "the", "largest", "area", "?"], "parse": "lambda $0.largest $1 (AND (area $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),area($0,$1)))"}, {"words": ["what", "state", "has", "the", "largest", "capital", "?"], "parse": "lambda $0.AND (largest $1 (capital $1)) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),largest($1,capital($1)))"}, {"words": ["what", "state", "has", "the", "largest", "city", "?"], "parse": "lambda $0.largest $1 (AND (city $1) (loc $1 $0) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),loc($1,$0),city($1)))"}, {"words": ["what", "state", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "has", "the", "largest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "has", "the", "largest", "urban", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "has", "the", "least", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "has", "the", "longest", "river", "?"], "parse": "lambda $0.AND (loc $1 $0) (longest $1 (river $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),longest($1,river($1)))"}, {"words": ["what", "state", "has", "the", "lowest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "has", "the", "most", "cities", "?"], "parse": "lambda $0.most $0 $1 (AND (city $1) (loc $1 $0) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),city($1)))"}, {"words": ["what", "state", "has", "the", "most", "major", "cities", "?"], "parse": "lambda $0.most $0 $1 (AND (city $1) (loc $1 $0) (major $1) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),major($1),city($1)))"}, {"words": ["what", "state", "has", "the", "most", "major", "rivers", "running", "through", "it", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (major $1) (river $1) (state $0) (traverse $1 $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),major($1),river($1),traverse($1,$0)))"}, {"words": ["what", "state", "has", "the", "most", "people", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "has", "the", "most", "rivers", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (river $1) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),river($1)))"}, {"words": ["what", "state", "has", "the", "most", "rivers", "running", "through", "it", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (river $1) (state $0) (traverse $1 $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),river($1),traverse($1,$0)))"}, {"words": ["what", "state", "has", "the", "shortest", "river", "?"], "parse": "lambda $0.AND (loc $1 $0) (shortest $1 (river $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),shortest($1,river($1)))"}, {"words": ["what", "state", "has", "the", "smallest", "area", "?"], "parse": "lambda $0.smallest $1 (AND (area $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),area($0,$1)))"}, {"words": ["what", "state", "has", "the", "smallest", "capital", "?"], "parse": "lambda $0.AND (loc $1 $0) (smallest $1 (capital $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),smallest($1,capital($1)))"}, {"words": ["what", "state", "has", "the", "smallest", "population", "?"], "parse": "lambda $0.smallest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "has", "the", "smallest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "has", "the", "smallest", "urban", "population", "?"], "parse": "lambda $0.smallest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "has", "the", "sparsest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["what", "state", "is", "austin", "in", "?"], "parse": "lambda $0.AND (loc austin $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(austin,$0))"}, {"words": ["what", "state", "is", "austin", "the", "capital", "of", "?"], "parse": "lambda $0.AND (capital austin) (loc austin $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),capital(austin),loc(austin,$0))"}, {"words": ["what", "state", "is", "boston", "in", "?"], "parse": "lambda $0.AND (loc boston $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(boston,$0))"}, {"words": ["what", "state", "is", "columbus", "the", "capital", "of", "?"], "parse": "lambda $0.AND (capital columbus) (loc columbus $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),capital(columbus),loc(columbus,$0))"}, {"words": ["what", "state", "is", "dallas", "in", "?"], "parse": "lambda $0.AND (loc dallas $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(dallas,$0))"}, {"words": ["what", "state", "is", "des", "moines", "located", "in", "?"], "parse": "lambda $0.AND (loc des_moines $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(des_moines,$0))"}, {"words": ["what", "state", "is", "miami", "in", "?"], "parse": "lambda $0.AND (loc miami $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(miami,$0))"}, {"words": ["what", "state", "is", "pittsburgh", "in", "?"], "parse": "lambda $0.AND (loc pittsburgh $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(pittsburgh,$0))"}, {"words": ["what", "state", "is", "the", "biggest", "?"], "parse": "lambda $0.largest $0 (state $0)", "parse_with_commas": "lambda $0.largest($0,state($0))"}, {"words": ["what", "state", "is", "the", "largest", "in", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["what", "state", "is", "the", "state", "with", "the", "most", "rivers", "?"], "parse": "lambda $0.AND (most $0 $1 (AND (loc $1 $0) (river $1) (state $0))) (state $0)", "parse_with_commas": "lambda $0.(state($0),most($0,$1,(state($0),loc($1,$0),river($1))))"}, {"words": ["what", "state", "that", "borders", "texas", "has", "the", "highest", "population", "?"], "parse": "lambda $0.largest $1 (AND (next_to $0 texas) (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),next_to($0,texas),population($0,$1)))"}, {"words": ["what", "state", "that", "borders", "texas", "is", "the", "largest", "?"], "parse": "lambda $0.largest $0 (AND (next_to $0 texas) (state $0))", "parse_with_commas": "lambda $0.largest($0,(state($0),next_to($0,texas)))"}, {"words": ["what", "state", "which", "the", "mississippi", "runs", "through", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0) (traverse mississippi $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),traverse(mississippi,$0),population($0,$1)))"}, {"words": ["what", "states", "are", "next", "to", "arizona", "?"], "parse": "lambda $0.AND (next_to $0 arizona) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,arizona))"}, {"words": ["what", "states", "are", "next", "to", "texas", "?"], "parse": "lambda $0.AND (next_to $0 texas) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,texas))"}, {"words": ["what", "states", "are", "next", "to", "the", "mississippi", "?"], "parse": "lambda $0.AND (next_to $0 mississippi) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,mississippi))"}, {"words": ["what", "states", "border", "alaska", "?"], "parse": "lambda $0.AND (next_to $0 alaska) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,alaska))"}, {"words": ["what", "states", "border", "arkansas", "?"], "parse": "lambda $0.AND (next_to $0 arkansas) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,arkansas))"}, {"words": ["what", "states", "border", "delaware", "?"], "parse": "lambda $0.AND (next_to $0 delaware) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,delaware))"}, {"words": ["what", "states", "border", "florida", "?"], "parse": "lambda $0.AND (next_to $0 florida) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,florida))"}, {"words": ["what", "states", "border", "georgia", "?"], "parse": "lambda $0.AND (next_to $0 georgia) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,georgia))"}, {"words": ["what", "states", "border", "hawaii", "?"], "parse": "lambda $0.AND (next_to $0 hawaii) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,hawaii))"}, {"words": ["what", "states", "border", "indiana", "?"], "parse": "lambda $0.AND (next_to $0 indiana) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,indiana))"}, {"words": ["what", "states", "border", "kentucky", "?"], "parse": "lambda $0.AND (next_to $0 kentucky) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,kentucky))"}, {"words": ["what", "states", "border", "michigan", "?"], "parse": "lambda $0.AND (next_to $0 michigan) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,michigan))"}, {"words": ["what", "states", "border", "missouri", "?"], "parse": "lambda $0.AND (next_to $0 missouri) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,missouri))"}, {"words": ["what", "states", "border", "montana", "?"], "parse": "lambda $0.AND (next_to $0 montana) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,montana))"}, {"words": ["what", "states", "border", "new", "hampshire", "?"], "parse": "lambda $0.AND (next_to $0 new_hampshire) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,new_hampshire))"}, {"words": ["what", "states", "border", "new", "jersey", "?"], "parse": "lambda $0.AND (next_to $0 new_jersey) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,new_jersey))"}, {"words": ["what", "states", "border", "ohio", "?"], "parse": "lambda $0.AND (next_to $0 ohio) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,ohio))"}, {"words": ["what", "states", "border", "rhode", "island", "?"], "parse": "lambda $0.AND (next_to $0 rhode_island) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,rhode_island))"}, {"words": ["what", "states", "border", "states", "that", "border", "colorado", "?"], "parse": "lambda $0.AND (next_to $0 $1) (next_to $1 colorado) (state $0) (state $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),next_to($1,colorado))"}, {"words": ["what", "states", "border", "states", "that", "border", "mississippi", "?"], "parse": "lambda $0.AND (next_to $0 $1) (next_to $1 mississippi) (state $0) (state $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),next_to($1,mississippi))"}, {"words": ["what", "states", "border", "states", "that", "border", "states", "that", "border", "florida", "?"], "parse": "lambda $0.AND (next_to $0 $1) (next_to $1 $2) (next_to $2 florida) (state $0) (state $1) (state $2)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),next_to($1,$2),state($2),next_to($2,florida))"}, {"words": ["what", "states", "border", "states", "that", "border", "states", "that", "border", "states", "that", "border", "texas", "?"], "parse": "lambda $0.AND (next_to $0 $1) (next_to $1 $2) (next_to $2 $3) (next_to $3 texas) (state $0) (state $1) (state $2) (state $3)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),next_to($1,$2),state($2),next_to($2,$3),state($3),next_to($3,texas))"}, {"words": ["what", "states", "border", "states", "that", "border", "the", "state", "with", "the", "largest", "population", "?"], "parse": "lambda $0.AND (largest $3 (AND (population $2 $3) (state $2))) (next_to $0 $1) (next_to $1 $2) (state $0) (state $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),next_to($1,$2),largest($3,(state($2),population($2,$3))))"}, {"words": ["what", "states", "border", "states", "that", "the", "mississsippi", "runs", "through", "?"], "parse": "lambda $0.AND (next_to $0 $1) (state $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),traverse(mississippi,$1))"}, {"words": ["what", "states", "border", "states", "that", "the", "ohio", "runs", "through", "?"], "parse": "lambda $0.AND (next_to $0 $1) (state $0) (state $1) (traverse ohio $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),traverse(ohio,$1))"}, {"words": ["what", "states", "border", "states", "which", "the", "mississippi", "runs", "through", "?"], "parse": "lambda $0.AND (next_to $0 $1) (state $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),traverse(mississippi,$1))"}, {"words": ["what", "states", "border", "texas", "?"], "parse": "lambda $0.AND (next_to $0 texas) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,texas))"}, {"words": ["what", "states", "border", "texas", "and", "have", "a", "major", "river", "?"], "parse": "lambda $0.AND (loc $2 $0) (major $2) (next_to $0 texas) (river $2) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,texas),loc($2,$0),major($2),river($2))"}, {"words": ["what", "states", "border", "the", "mississippi", "river", "?"], "parse": "lambda $0.AND (next_to $0 mississippi) (river mississippi) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,mississippi),river(mississippi))"}, {"words": ["what", "states", "border", "the", "most", "populous", "state", "?"], "parse": "lambda $0.AND (largest $2 (AND (population $1 $2) (state $1))) (next_to $0 $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),largest($2,(population($1,$2),state($1))))"}, {"words": ["what", "states", "border", "the", "state", "that", "borders", "the", "most", "states", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (next_to $1 $2) (state $1) (state $2))) (next_to $0 $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),most($1,$2,(state($1),next_to($1,$2),state($2))))"}, {"words": ["what", "states", "border", "the", "state", "with", "the", "most", "cities", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (city $2) (loc $2 $1) (state $1))) (next_to $0 $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),most($1,$2,(state($1),loc($2,$1),city($2))))"}, {"words": ["what", "states", "border", "the", "state", "with", "the", "most", "major", "cities", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (city $2) (loc $2 $1) (major $2) (state $1))) (next_to $0 $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),most($1,$2,(state($1),loc($2,$1),major($2),city($2))))"}, {"words": ["what", "states", "border", "the", "state", "with", "the", "smallest", "area", "?"], "parse": "lambda $0.AND (next_to $0 $1) (smallest $2 (AND (area $1 $2) (state $1))) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),smallest($2,(state($1),area($1,$2))))"}, {"words": ["what", "states", "border", "the", "states", "with", "the", "most", "cities", "?"], "parse": "lambda $0.AND (most $1 $2 (AND (city $2) (loc $2 $1) (state $1))) (next_to $0 $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),most($1,$2,(state($1),loc($2,$1),city($2))))"}, {"words": ["what", "states", "border", "wisconsin", "?"], "parse": "lambda $0.AND (next_to $0 wisconsin) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,wisconsin))"}, {"words": ["what", "states", "capital", "is", "dover", "?"], "parse": "lambda $0.AND (capital $0 dover) (state $0)", "parse_with_commas": "lambda $0.(state($0),capital($0,dover))"}, {"words": ["what", "states", "contain", "at", "least", "one", "major", "rivers", "?"], "parse": "lambda $0.AND (loc $1 $0) (major $1) (river $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),major($1),river($1))"}, {"words": ["what", "states", "does", "the", "colorado", "river", "run", "through", "?"], "parse": "lambda $0.AND (river colorado) (state $0) (traverse colorado $0)", "parse_with_commas": "lambda $0.(state($0),river(colorado),traverse(colorado,$0))"}, {"words": ["what", "states", "does", "the", "delaware", "river", "run", "through", "?"], "parse": "lambda $0.AND (river delaware) (state $0) (traverse delaware $0)", "parse_with_commas": "lambda $0.(state($0),river(delaware),traverse(delaware,$0))"}, {"words": ["what", "states", "does", "the", "mississippi", "river", "run", "through", "?"], "parse": "lambda $0.AND (river mississippi) (state $0) (traverse mississippi $0)", "parse_with_commas": "lambda $0.(state($0),river(mississippi),traverse(mississippi,$0))"}, {"words": ["what", "states", "does", "the", "mississippi", "run", "through", "?"], "parse": "lambda $0.AND (state $0) (traverse mississippi $0)", "parse_with_commas": "lambda $0.(state($0),traverse(mississippi,$0))"}, {"words": ["what", "states", "does", "the", "missouri", "river", "run", "through", "?"], "parse": "lambda $0.AND (river missouri) (state $0) (traverse missouri $0)", "parse_with_commas": "lambda $0.(state($0),river(missouri),traverse(missouri,$0))"}, {"words": ["what", "states", "does", "the", "missouri", "run", "through", "?"], "parse": "lambda $0.AND (state $0) (traverse missouri $0)", "parse_with_commas": "lambda $0.(state($0),traverse(missouri,$0))"}, {"words": ["what", "states", "does", "the", "ohio", "river", "go", "through", "?"], "parse": "lambda $0.AND (river ohio) (state $0) (traverse ohio $0)", "parse_with_commas": "lambda $0.(state($0),river(ohio),traverse(ohio,$0))"}, {"words": ["what", "states", "does", "the", "ohio", "river", "run", "through", "?"], "parse": "lambda $0.AND (river ohio) (state $0) (traverse ohio $0)", "parse_with_commas": "lambda $0.(state($0),river(ohio),traverse(ohio,$0))"}, {"words": ["what", "states", "does", "the", "shortest", "river", "run", "through", "?"], "parse": "lambda $0.AND (shortest $1 (river $1)) (state $0) (traverse $1 $0)", "parse_with_commas": "lambda $0.(state($0),shortest($1,river($1)),traverse($1,$0))"}, {"words": ["what", "states", "have", "a", "capital", "that", "is", "the", "highest", "point", "in", "the", "state", "?"], "parse": "lambda $0.AND (capital $1) (highest $1 (AND (loc $1 $0) (place $1) (state $0))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),capital($1),highest($1,(place($1),loc($1,$0),state($0))))"}, {"words": ["what", "states", "have", "a", "city", "named", "austin", "?"], "parse": "lambda $0.AND (loc austin $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(austin,$0))"}, {"words": ["what", "states", "have", "cities", "named", "austin", "?"], "parse": "lambda $0.AND (city austin) (loc austin $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(austin,$0),city(austin))"}, {"words": ["what", "states", "have", "cities", "named", "dallas", "?"], "parse": "lambda $0.AND (city dallas) (loc dallas $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(dallas,$0),city(dallas))"}, {"words": ["what", "states", "have", "cities", "named", "plano", "?"], "parse": "lambda $0.AND (city plano) (loc plano $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(plano,$0),city(plano))"}, {"words": ["what", "states", "have", "cities", "named", "portland", "?"], "parse": "lambda $0.AND (city portland) (loc portland $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(portland,$0),city(portland))"}, {"words": ["what", "states", "have", "cities", "named", "rochester", "?"], "parse": "lambda $0.AND (city rochester) (loc rochester $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(rochester,$0),city(rochester))"}, {"words": ["what", "states", "have", "cities", "named", "salt", "lake", "city", "?"], "parse": "lambda $0.AND (city salt_lake_city) (loc salt_lake_city $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(salt_lake_city,$0),city(salt_lake_city))"}, {"words": ["what", "states", "have", "no", "bordering", "state", "?"], "parse": "lambda $0.AND (not  next_to $0 $1 (state $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),not (next_to($0,$1),state($1)))"}, {"words": ["what", "states", "have", "rivers", "named", "colorado", "?"], "parse": "lambda $0.AND (loc colorado $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(colorado,$0))"}, {"words": ["what", "states", "have", "rivers", "running", "through", "them", "?"], "parse": "lambda $0.AND (loc $1 $0) (river $1) (state $0) (traverse $1 $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),river($1),traverse($1,$0))"}, {"words": ["what", "states", "have", "towns", "named", "springfield", "?"], "parse": "lambda $0.AND (loc springfield $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(springfield,$0))"}, {"words": ["what", "states", "high", "point", "are", "higher", "than", "that", "of", "colorado", "?"], "parse": "lambda $0.AND (high_point $0 $1) (high_point colorado $2) (higher $1 $2) (state $0)", "parse_with_commas": "lambda $0.(state($0),high_point($0,$1),higher($1,$2),high_point(colorado,$2))"}, {"words": ["what", "states", "in", "the", "united", "states", "have", "a", "city", "of", "springfield", "?"], "parse": "lambda $0.AND (loc $0 usa) (loc springfield $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($0,usa),loc(springfield,$0))"}, {"words": ["what", "states", "neighbor", "maine", "?"], "parse": "lambda $0.AND (next_to $0 maine) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,maine))"}, {"words": ["what", "states", "surround", "kentucky", "?"], "parse": "lambda $0.AND (next_to $0 kentucky) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,kentucky))"}, {"words": ["what", "texas", "city", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 texas) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,texas),population($0,$1)))"}, {"words": ["whats", "the", "largest", "city", "?"], "parse": "lambda $0.largest $0 (city $0)", "parse_with_commas": "lambda $0.largest($0,city($0))"}, {"words": ["where", "are", "mountains", "?"], "parse": "lambda $0.AND (loc $1 $0) (mountain $1)", "parse_with_commas": "lambda $0.(loc($1,$0),mountain($1))"}, {"words": ["where", "is", "austin", "?"], "parse": "lambda $0.loc austin $0", "parse_with_commas": "lambda $0.loc(austin,$0)"}, {"words": ["where", "is", "baton", "rouge", "?"], "parse": "lambda $0.loc baton_rouge $0", "parse_with_commas": "lambda $0.loc(baton_rouge,$0)"}, {"words": ["where", "is", "dallas", "?"], "parse": "lambda $0.loc dallas $0", "parse_with_commas": "lambda $0.loc(dallas,$0)"}, {"words": ["where", "is", "fort", "wayne", "?"], "parse": "lambda $0.loc fort_wayne $0", "parse_with_commas": "lambda $0.loc(fort_wayne,$0)"}, {"words": ["where", "is", "houston", "?"], "parse": "lambda $0.loc houston $0", "parse_with_commas": "lambda $0.loc(houston,$0)"}, {"words": ["where", "is", "indianapolis", "?"], "parse": "lambda $0.loc indianapolis $0", "parse_with_commas": "lambda $0.loc(indianapolis,$0)"}, {"words": ["where", "is", "massachusetts", "?"], "parse": "lambda $0.loc massachusetts $0", "parse_with_commas": "lambda $0.loc(massachusetts,$0)"}, {"words": ["where", "is", "mount", "whitney", "?"], "parse": "lambda $0.loc mount_whitney $0", "parse_with_commas": "lambda $0.loc(mount_whitney,$0)"}, {"words": ["where", "is", "mount", "whitney", "located", "?"], "parse": "lambda $0.loc mount_whitney $0", "parse_with_commas": "lambda $0.loc(mount_whitney,$0)"}, {"words": ["where", "is", "new", "hampshire", "?"], "parse": "lambda $0.loc new_hampshire $0", "parse_with_commas": "lambda $0.loc(new_hampshire,$0)"}, {"words": ["where", "is", "new", "orleans", "?"], "parse": "lambda $0.loc new_orleans $0", "parse_with_commas": "lambda $0.loc(new_orleans,$0)"}, {"words": ["where", "is", "portland", "?"], "parse": "lambda $0.loc portland $0", "parse_with_commas": "lambda $0.loc(portland,$0)"}, {"words": ["where", "is", "san", "diego", "?"], "parse": "lambda $0.loc san_diego $0", "parse_with_commas": "lambda $0.loc(san_diego,$0)"}, {"words": ["where", "is", "san", "jose", "?"], "parse": "lambda $0.loc san_jose $0", "parse_with_commas": "lambda $0.loc(san_jose,$0)"}, {"words": ["where", "is", "scotts", "valley", "?"], "parse": "lambda $0.loc scotts_valley $0", "parse_with_commas": "lambda $0.loc(scotts_valley,$0)"}, {"words": ["where", "is", "springfield", "?"], "parse": "lambda $0.loc springfield $0", "parse_with_commas": "lambda $0.loc(springfield,$0)"}, {"words": ["where", "is", "the", "chattahoochee", "river", "?"], "parse": "lambda $0.AND (loc chattahoochee $0) (river chattahoochee)", "parse_with_commas": "lambda $0.(loc(chattahoochee,$0),river(chattahoochee))"}, {"words": ["where", "is", "the", "highest", "mountain", "of", "the", "united", "states", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 usa) (mountain $0))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),loc($0,usa)))"}, {"words": ["where", "is", "the", "highest", "point", "in", "hawaii", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 hawaii) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,hawaii)))"}, {"words": ["where", "is", "the", "highest", "point", "in", "montana", "?"], "parse": "lambda $0.highest $0 (AND (loc $0 montana) (place $0))", "parse_with_commas": "lambda $0.highest($0,(place($0),loc($0,montana)))"}, {"words": ["where", "is", "the", "lowest", "point", "in", "maryland", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 maryland) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,maryland)))"}, {"words": ["where", "is", "the", "lowest", "point", "in", "the", "us", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 usa) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,usa)))"}, {"words": ["where", "is", "the", "lowest", "spot", "in", "iowa", "?"], "parse": "lambda $0.lowest $0 (AND (loc $0 iowa) (place $0))", "parse_with_commas": "lambda $0.lowest($0,(place($0),loc($0,iowa)))"}, {"words": ["where", "is", "the", "most", "populated", "area", "of", "new", "mexico", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 new_mexico) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(population($0,$1),city($0),loc($0,new_mexico)))"}, {"words": ["where", "is", "the", "smallest", "city", "?"], "parse": "lambda $0.AND (loc $1 $0) (smallest $1 (city $1))", "parse_with_commas": "lambda $0.(loc($1,$0),smallest($1,city($1)))"}, {"words": ["which", "capitals", "are", "in", "the", "states", "that", "border", "texas", "?"], "parse": "lambda $0.AND (capital $0) (loc $0 $1) (next_to $1 texas) (state $1)", "parse_with_commas": "lambda $0.(capital($0),loc($0,$1),state($1),next_to($1,texas))"}, {"words": ["which", "capitals", "are", "not", "major", "cities", "?"], "parse": "lambda $0.AND (capital $0) (not  major $0 (city $0))", "parse_with_commas": "lambda $0.(capital($0),not (major($0),city($0)))"}, {"words": ["which", "city", "in", "california", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (loc $0 california) (population $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),loc($0,california),population($0,$1)))"}, {"words": ["which", "is", "the", "density", "of", "the", "state", "that", "the", "largest", "river", "in", "the", "united", "states", "runs", "through", "?"], "parse": "lambda $0.AND (density $1 $0) (longest $2 (AND (loc $2 usa) (river $2))) (state $1) (traverse $2 $1)", "parse_with_commas": "lambda $0.(density($1,$0),state($1),longest($2,(river($2),loc($2,usa))),traverse($2,$1))"}, {"words": ["which", "is", "the", "highest", "peak", "not", "in", "alaska", "?"], "parse": "lambda $0.highest $0 (AND (mountain $0) (not  loc $0 alaska))", "parse_with_commas": "lambda $0.highest($0,(mountain($0),not (loc($0,alaska))))"}, {"words": ["which", "is", "the", "longest", "river", "in", "usa", "?"], "parse": "lambda $0.longest $0 (AND (loc $0 usa) (river $0))", "parse_with_commas": "lambda $0.longest($0,(river($0),loc($0,usa)))"}, {"words": ["which", "is", "the", "lowest", "point", "of", "the", "states", "that", "the", "mississippi", "runs", "through", "?"], "parse": "lambda $0.lowest $1 (AND (loc $1 $0) (place $1) (state $0) (traverse mississippi $0))", "parse_with_commas": "lambda $0.lowest($1,(place($1),loc($1,$0),state($0),traverse(mississippi,$0)))"}, {"words": ["which", "is", "the", "shortest", "river", "?"], "parse": "lambda $0.shortest $0 (river $0)", "parse_with_commas": "lambda $0.shortest($0,river($0))"}, {"words": ["which", "is", "the", "smallest", "state", "?"], "parse": "lambda $0.smallest $0 (state $0)", "parse_with_commas": "lambda $0.smallest($0,state($0))"}, {"words": ["which", "of", "the", "states", "bordering", "pennsylvania", "has", "the", "largest", "population", "?"], "parse": "lambda $0.largest $1 (AND (next_to $0 pennsylvania) (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),next_to($0,pennsylvania),population($0,$1)))"}, {"words": ["which", "river", "goes", "through", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["which", "river", "runs", "through", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["which", "river", "runs", "through", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["which", "river", "traverses", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (river $0) (state $1) (traverse $0 $1))", "parse_with_commas": "lambda $0.most($0,$1,(river($0),traverse($0,$1),state($1)))"}, {"words": ["which", "rivers", "are", "in", "alaska", "?"], "parse": "lambda $0.AND (loc $0 alaska) (river $0)", "parse_with_commas": "lambda $0.(river($0),loc($0,alaska))"}, {"words": ["which", "rivers", "do", "not", "run", "through", "texas", "?"], "parse": "lambda $0.AND (not  traverse $0 texas) (river $0)", "parse_with_commas": "lambda $0.(river($0),not (traverse($0,texas)))"}, {"words": ["which", "rivers", "do", "not", "run", "through", "usa", "?"], "parse": "lambda $0.AND (not  traverse $0 usa) (river $0)", "parse_with_commas": "lambda $0.(river($0),not (traverse($0,usa)))"}, {"words": ["which", "rivers", "flow", "through", "alaska", "?"], "parse": "lambda $0.AND (river $0) (traverse $0 alaska)", "parse_with_commas": "lambda $0.(river($0),traverse($0,alaska))"}, {"words": ["which", "rivers", "run", "through", "states", "bordering", "new", "mexico", "?"], "parse": "lambda $0.AND (next_to $1 new_mexico) (river $0) (state $1) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),next_to($1,new_mexico))"}, {"words": ["which", "rivers", "run", "through", "states", "that", "border", "the", "state", "with", "the", "capital", "austin", "?"], "parse": "lambda $0.AND (capital austin) (loc austin $2) (next_to $1 $2) (river $0) (state $1) (state $2) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),next_to($1,$2),state($2),loc(austin,$2),capital(austin))"}, {"words": ["which", "rivers", "run", "through", "states", "with", "fewest", "cities", "?"], "parse": "lambda $0.AND (fewest $1 $2 (AND (city $2) (loc $2 $1) (state $1))) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),fewest($1,$2,(state($1),loc($2,$1),city($2))))"}, {"words": ["which", "rivers", "run", "through", "the", "state", "with", "the", "largest", "city", "in", "the", "us", "?"], "parse": "lambda $0.AND (largest $2 (AND (city $2) (loc $2 $1) (loc $2 usa) (state $1))) (river $0) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),largest($2,(state($1),loc($2,$1),city($2),loc($2,usa))))"}, {"words": ["which", "rivers", "run", "through", "the", "state", "with", "the", "lowest", "elevation", "in", "the", "usa", "?"], "parse": "lambda $0.AND (loc $2 $1) (lowest $2 (AND (loc $2 usa) (place $2))) (river $0) (state $1) (traverse $0 $1)", "parse_with_commas": "lambda $0.(river($0),traverse($0,$1),state($1),loc($2,$1),lowest($2,(place($2),loc($2,usa))))"}, {"words": ["which", "state", "border", "kentucky", "?"], "parse": "lambda $0.AND (next_to $0 kentucky) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,kentucky))"}, {"words": ["which", "state", "borders", "florida", "?"], "parse": "lambda $0.AND (next_to $0 florida) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,florida))"}, {"words": ["which", "state", "borders", "hawaii", "?"], "parse": "lambda $0.AND (next_to $0 hawaii) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,hawaii))"}, {"words": ["which", "state", "borders", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (next_to $0 $1) (state $0) (state $1))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),next_to($0,$1),state($1)))"}, {"words": ["which", "state", "borders", "the", "most", "states", "?"], "parse": "lambda $0.most $0 $1 (AND (next_to $0 $1) (state $0) (state $1))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),next_to($0,$1),state($1)))"}, {"words": ["which", "state", "capital", "has", "the", "smallest", "population", "?"], "parse": "lambda $0.smallest $1 (AND (capital $0) (population $0 $1))", "parse_with_commas": "lambda $0.smallest($1,(capital($0),population($0,$1)))"}, {"words": ["which", "state", "contains", "most", "rivers", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (river $1) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),river($1)))"}, {"words": ["which", "state", "has", "the", "biggest", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["which", "state", "has", "the", "greatest", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "greatest", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["which", "state", "has", "the", "highest", "elevation", "?"], "parse": "lambda $0.highest $1 (AND (loc $1 $0) (place $1) (state $0))", "parse_with_commas": "lambda $0.highest($1,(state($0),loc($1,$0),place($1)))"}, {"words": ["which", "state", "has", "the", "highest", "peak", "in", "the", "country", "?"], "parse": "lambda $0.highest $1 (AND (loc $1 $0) (mountain $1) (state $0))", "parse_with_commas": "lambda $0.highest($1,(state($0),loc($1,$0),mountain($1)))"}, {"words": ["which", "state", "has", "the", "highest", "point", "?"], "parse": "lambda $0.AND (highest $1 (place $1)) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),highest($1,place($1)))"}, {"words": ["which", "state", "has", "the", "highest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "largest", "city", "?"], "parse": "lambda $0.largest $1 (AND (city $1) (loc $1 $0) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),loc($1,$0),city($1)))"}, {"words": ["which", "state", "has", "the", "largest", "density", "?"], "parse": "lambda $0.largest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "least", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "longest", "river", "?"], "parse": "lambda $0.longest $1 (AND (loc $1 $0) (river $1) (state $0))", "parse_with_commas": "lambda $0.longest($1,(state($0),loc($1,$0),river($1)))"}, {"words": ["which", "state", "has", "the", "lowest", "elevation", "?"], "parse": "lambda $0.AND (loc $1 $0) (lowest $1 (place $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),lowest($1,place($1)))"}, {"words": ["which", "state", "has", "the", "lowest", "point", "that", "borders", "idaho", "?"], "parse": "lambda $0.AND (loc $1 $0) (lowest $1 (place $1)) (next_to $0 idaho) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),lowest($1,place($1)),next_to($0,idaho))"}, {"words": ["which", "state", "has", "the", "lowest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "most", "major", "cities", "?"], "parse": "lambda $0.most $0 $1 (AND (city $1) (loc $1 $0) (major $1) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),major($1),city($1)))"}, {"words": ["which", "state", "has", "the", "most", "major", "rivers", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (major $1) (river $1) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),major($1),river($1)))"}, {"words": ["which", "state", "has", "the", "most", "major", "rivers", "running", "through", "it", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (major $1) (river $1) (state $0) (traverse $1 $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),major($1),river($1),traverse($1,$0)))"}, {"words": ["which", "state", "has", "the", "most", "people", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["which", "state", "has", "the", "most", "population", "?"], "parse": "lambda $0.largest $1 (AND (population $0 $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),population($0,$1)))"}, {"words": ["which", "state", "has", "the", "most", "rivers", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (river $1) (state $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),river($1)))"}, {"words": ["which", "state", "has", "the", "most", "rivers", "running", "through", "it", "?"], "parse": "lambda $0.most $0 $1 (AND (loc $1 $0) (river $1) (state $0) (traverse $1 $0))", "parse_with_commas": "lambda $0.most($0,$1,(state($0),loc($1,$0),river($1),traverse($1,$0)))"}, {"words": ["which", "state", "has", "the", "red", "river", "?"], "parse": "lambda $0.AND (loc red $0) (river red) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(red,$0),river(red))"}, {"words": ["which", "state", "has", "the", "smallest", "area", "that", "borders", "texas", "?"], "parse": "lambda $0.smallest $1 (AND (area $0 $1) (next_to $0 texas) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),area($0,$1),next_to($0,texas)))"}, {"words": ["which", "state", "has", "the", "smallest", "average", "urban", "population", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "smallest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "has", "the", "sparsest", "population", "density", "?"], "parse": "lambda $0.smallest $1 (AND (density $0 $1) (state $0))", "parse_with_commas": "lambda $0.smallest($1,(state($0),density($0,$1)))"}, {"words": ["which", "state", "is", "kalamazoo", "in", "?"], "parse": "lambda $0.AND (loc kalamazoo $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(kalamazoo,$0))"}, {"words": ["which", "state", "is", "mount", "mckinley", "in", "?"], "parse": "lambda $0.AND (loc mount_mckinley $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(mount_mckinley,$0))"}, {"words": ["which", "state", "is", "the", "city", "denver", "located", "in", "?"], "parse": "lambda $0.AND (city denver) (loc denver $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),city(denver),loc(denver,$0))"}, {"words": ["which", "state", "is", "the", "largest", "city", "in", "montana", "in", "?"], "parse": "lambda $0.AND (largest $1 (AND (city $1) (loc $1 montana))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),largest($1,(city($1),loc($1,montana))),loc($1,$0))"}, {"words": ["which", "state", "is", "the", "smallest", "?"], "parse": "lambda $0.smallest $0 (state $0)", "parse_with_commas": "lambda $0.smallest($0,state($0))"}, {"words": ["which", "states", "adjoin", "alabama", "?"], "parse": "lambda $0.AND (next_to $0 alabama) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,alabama))"}, {"words": ["which", "states", "border", "alabama", "?"], "parse": "lambda $0.AND (next_to $0 alabama) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,alabama))"}, {"words": ["which", "states", "border", "alaska", "?"], "parse": "lambda $0.AND (next_to $0 alaska) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,alaska))"}, {"words": ["which", "states", "border", "arizona", "?"], "parse": "lambda $0.AND (next_to $0 arizona) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,arizona))"}, {"words": ["which", "states", "border", "colorado", "?"], "parse": "lambda $0.AND (next_to $0 colorado) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,colorado))"}, {"words": ["which", "states", "border", "hawaii", "?"], "parse": "lambda $0.AND (next_to $0 hawaii) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,hawaii))"}, {"words": ["which", "states", "border", "illinois", "?"], "parse": "lambda $0.AND (next_to $0 illinois) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,illinois))"}, {"words": ["which", "states", "border", "iowa", "?"], "parse": "lambda $0.AND (next_to $0 iowa) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,iowa))"}, {"words": ["which", "states", "border", "kentucky", "?"], "parse": "lambda $0.AND (next_to $0 kentucky) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,kentucky))"}, {"words": ["which", "states", "border", "michigan", "?"], "parse": "lambda $0.AND (next_to $0 michigan) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,michigan))"}, {"words": ["which", "states", "border", "new", "york", "?"], "parse": "lambda $0.AND (next_to $0 new_york) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,new_york))"}, {"words": ["which", "states", "border", "no", "other", "states", "?"], "parse": "lambda $0.AND (not  next_to $0 $1 (state $1)) (state $0)", "parse_with_commas": "lambda $0.(state($0),not (next_to($0,$1),state($1)))"}, {"words": ["which", "states", "border", "south", "dakota", "?"], "parse": "lambda $0.AND (next_to $0 south_dakota) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,south_dakota))"}, {"words": ["which", "states", "border", "states", "through", "which", "the", "mississippi", "traverses", "?"], "parse": "lambda $0.AND (next_to $0 $1) (state $0) (state $1) (traverse mississippi $1)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),state($1),traverse(mississippi,$1))"}, {"words": ["which", "states", "border", "texas", "?"], "parse": "lambda $0.AND (next_to $0 texas) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,texas))"}, {"words": ["which", "states", "border", "the", "longest", "river", "in", "the", "usa", "?"], "parse": "lambda $0.AND (longest $1 (AND (loc $1 usa) (river $1))) (next_to $0 $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),longest($1,(river($1),loc($1,usa))))"}, {"words": ["which", "states", "border", "the", "missouri", "river", "?"], "parse": "lambda $0.AND (next_to $0 missouri) (river missouri) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,missouri),river(missouri))"}, {"words": ["which", "states", "border", "the", "state", "with", "the", "smallest", "area", "?"], "parse": "lambda $0.AND (next_to $0 $1) (smallest $2 (AND (area $1 $2) (state $1))) (state $0)", "parse_with_commas": "lambda $0.(state($0),next_to($0,$1),smallest($2,(state($1),area($1,$2))))"}, {"words": ["which", "states", "capital", "city", "is", "the", "largest", "?"], "parse": "lambda $0.largest $1 (AND (capital $0 $1) (city $1) (state $0))", "parse_with_commas": "lambda $0.largest($1,(state($0),capital($0,$1),city($1)))"}, {"words": ["which", "states", "do", "colorado", "river", "flow", "through", "?"], "parse": "lambda $0.AND (river colorado) (state $0) (traverse colorado $0)", "parse_with_commas": "lambda $0.(state($0),river(colorado),traverse(colorado,$0))"}, {"words": ["which", "states", "does", "not", "border", "texas", "?"], "parse": "lambda $0.AND (not  next_to $0 texas) (state $0)", "parse_with_commas": "lambda $0.(state($0),not (next_to($0,texas)))"}, {"words": ["which", "states", "does", "the", "chattahoochee", "river", "run", "through", "?"], "parse": "lambda $0.AND (river chattahoochee) (state $0) (traverse chattahoochee $0)", "parse_with_commas": "lambda $0.(state($0),river(chattahoochee),traverse(chattahoochee,$0))"}, {"words": ["which", "states", "does", "the", "colorado", "river", "run", "through", "?"], "parse": "lambda $0.AND (state $0) (traverse colorado $0)", "parse_with_commas": "lambda $0.(state($0),traverse(colorado,$0))"}, {"words": ["which", "states", "does", "the", "longest", "river", "cross", "?"], "parse": "lambda $0.AND (longest $1 (river $1)) (state $0) (traverse $1 $0)", "parse_with_commas": "lambda $0.(state($0),longest($1,river($1)),traverse($1,$0))"}, {"words": ["which", "states", "does", "the", "longest", "river", "run", "through", "?"], "parse": "lambda $0.AND (longest $1 (river $1)) (state $0) (traverse $1 $0)", "parse_with_commas": "lambda $0.(state($0),longest($1,river($1)),traverse($1,$0))"}, {"words": ["which", "states", "does", "the", "mississippi", "river", "run", "through", "?"], "parse": "lambda $0.AND (river mississippi) (state $0) (traverse mississippi $0)", "parse_with_commas": "lambda $0.(state($0),river(mississippi),traverse(mississippi,$0))"}, {"words": ["which", "states", "does", "the", "mississippi", "run", "through", "?"], "parse": "lambda $0.AND (state $0) (traverse mississippi $0)", "parse_with_commas": "lambda $0.(state($0),traverse(mississippi,$0))"}, {"words": ["which", "states", "does", "the", "missouri", "river", "pass", "through", "?"], "parse": "lambda $0.AND (state $0) (traverse missouri $0)", "parse_with_commas": "lambda $0.(state($0),traverse(missouri,$0))"}, {"words": ["which", "states", "does", "the", "missouri", "river", "run", "through", "?"], "parse": "lambda $0.AND (river missouri) (state $0) (traverse missouri $0)", "parse_with_commas": "lambda $0.(state($0),river(missouri),traverse(missouri,$0))"}, {"words": ["which", "states", "have", "a", "major", "city", "named", "austin", "?"], "parse": "lambda $0.AND (city austin) (loc austin $0) (major austin) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(austin,$0),major(austin),city(austin))"}, {"words": ["which", "states", "have", "a", "river", "?"], "parse": "lambda $0.AND (loc $1 $0) (river $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),river($1))"}, {"words": ["which", "states", "have", "cities", "named", "austin", "?"], "parse": "lambda $0.AND (city austin) (loc austin $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc(austin,$0),city(austin))"}, {"words": ["which", "states", "have", "points", "higher", "than", "the", "highest", "point", "in", "colorado", "?"], "parse": "lambda $0.AND (higher $1 $2) (highest $2 (AND (loc $2 colorado) (place $2))) (loc $1 $0) (place $1) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),place($1),higher($1,$2),highest($2,(place($2),loc($2,colorado))))"}, {"words": ["which", "states", "have", "points", "that", "are", "higher", "than", "the", "highest", "point", "in", "texas", "?"], "parse": "lambda $0.AND (higher $1 $2) (highest $2 (AND (loc $2 texas) (place $2))) (loc $1 $0) (state $0)", "parse_with_commas": "lambda $0.(state($0),loc($1,$0),higher($1,$2),highest($2,(place($2),loc($2,texas))))"}, {"words": ["which", "states", "lie", "on", "the", "largest", "river", "in", "the", "united", "states", "?"], "parse": "lambda $0.AND (largest $1 (AND (loc $1 usa) (river $1))) (state $0) (traverse $1 $0)", "parse_with_commas": "lambda $0.(state($0),traverse($1,$0),largest($1,(river($1),loc($1,usa))))"}, {"words": ["which", "us", "city", "has", "the", "highest", "population", "density", "?"], "parse": "lambda $0.largest $1 (AND (city $0) (density $0 $1))", "parse_with_commas": "lambda $0.largest($1,(city($0),density($0,$1)))"}]}