chiltag_to_node_types = {
                    'adj': 'adj',
                    'adv': 'adv',
                    'adv:int': 'adv',
                    'adv:tem': 'adv',
                    'aux': 'aux',
                    'conj': 'connect',
                    'coord': 'connect',
                    'cop': 'cop',
                    'det': 'quant',
                    'det:art': 'quant',
                    'det:dem': 'quant',
                    'det:int': 'quant',
                    'det:num': 'quant',
                    'det:poss': 'quant',
                    #'meta':set([None]),
                    'mod': 'raise',
                    'mod:aux': 'quant',
                    'n': 'noun',
                    'n:pt': 'noun',
                    'n:gerund': 'entity',
                    'n:let': 'entity',
                    'n:prop': 'entity',
                    'neg': 'neg',
                    #'on':set([None]),
                    #'part':set([None]),
                    #'poss':set([None]),
                    'prep': 'prep',
                    'pro:dem': 'entity',
                    #'pro:exist':set(['NP']),
                    'pro:indef': 'entity',
                    'pro:int': 'WH',
                    'pro:obj': 'entity',
                    'pro:per': 'entity',
                    'pro:poss': 'entity',
                    'pro:refl': 'entity',
                    'pro:sub': 'entity',
                    'qn': 'quant',
                    'v': 'verb',
                    #'v:obj':set([None]),
                    }

pos_marking_dict = {
                    'adj':set(['N|N']),
                    'adv':set(['S|S','(S|NP)|(S|NP)|(S|NP|NP)|(S|NP|NP)']),
                    'adv:int':set(['X']),
                    'adv:tem':set(['X']),
                    'aux':set(['X']),
                    'chi':set(['X']),
                    #'co':set(['S']),
                    'co':set(['X']),
                    'conj':set(['S|S|S','NP|NP|NP','N|N|N','(S|NP)|(S|NP)|(S|NP)']), # don't have schemas yet]), minimal list for now
                    'coord':set(['S|S|S','NP|NP|NP','N|N|N','(S|NP)|(S|NP)|(S|NP)']), # same as above ok for now?
                    'cop':set(['S|S','S|NP|(S|NP)', 'S|(S|NP)|NP','X']),
                    'det':set(['NP|N']),
                    'det:art':set(['NP|N']),
                    'det:dem':set(['NP|N']),
                    'det:int':set(['NP']),
                    'det:num':set(['NP|N']),
                    'det:poss':set(['NP|N']),
                    'meta':set(['X']),
                    'mod':set(['S|NP|(S|NP)','S|(S|NP)|NP']),
                    'mod:aux':set(['X']),
                    'n':set(['N']),
                    'n:gerund':set(['NP']),
                    'n:let':set(['NP']),
                    'n:prop':set(['NP']),
                    'n:pt':set(['N']), # seems to be for nouns with plural morph.]), like scissors
                    'neg':set(['(S|NP)|(S|NP)','(S|NP)|(S|NP)']),
                    #'neg':set(['S|S','(S|NP)|(S|NP)','(S|NP|NP)|(S|NP|NP)']), # ?
                    'on':set(['X']),
                    'part':set(['X']),
                    'poss':set(['X']),
                    'post':set(['S|S']), # ?
                    'prep':set(['S|NP|NP', 'S|S|NP','NP|NP|NP','S|NP']),
                    'pro:dem':set(['NP']), # ?
                    'pro:exist':set(['NP']),
                    'pro:indef':set(['NP']),
                    'pro:int':set(['NP']),
                    'pro:obj':set(['NP']),
                    'pro:per':set(['NP']),
                    'pro:poss':set(['NP']),
                    'pro:refl':set(['NP']),
                    'pro:rel':set(['NP']),
                    'pro:sub':set(['NP']),
                    'qn':set(['NP|N', 'NP|NP']),
                    'sing':set(['X']),
                    'v':set(['S|NP','S|NP|NP','S|NP', 'S|NP|NP']),
                    #'v:obj':set([None]),
                    'wplay':set(['X']),
                    }
#pos_marking_dict['neg'] = set([f'({x})|({x})' for x in pos_marking_dict['v']] +[f'({x})|({x})' for x in pos_marking_dict['mod']] )

#pos_marking_dict = {k:v.union(set([c.replace('S','Sq') for c in v])) for k,v in pos_marking_dict.items()}


base_lexicon = {k:set(['NP']) for k in ('you','i','me','he','she','it','WHAT','WHO')}
base_lexicon['equals'] = set(['S|NP|NP'])
base_lexicon['hasproperty'] = set(['S|NP|(N|N)'])
base_lexicon['mod|will_2'] = set(['S|NP', 'S|NP|NP'])
base_lexicon['not'] = set(['X'])

agt_lexicon =[
        ("'ll", ['lambda $0.lambda $1.mod|~will ($0 $1) || S\\NP/(S\\NP)']),# ?
        ("'re",[ 'lambda $0.lambda $1.v|hasproperty $1 $0 || S\\NP/NP','lambda $0.lambda $1.v|equals $1 $0 || S\\NP/NP']),
        ("'s", ['lambda $0.lambda $1.v|equals $1 $0 || S\\NP/NP','lambda $0.lambda $1.v|hasproperty $1 $0 || S\\NP/NP']),
        ('Adam', ['n:prop|adam || NP']),
        ('I', ['pro:sub|i || NP']),
        ('a', ['lambda $0.det:art|a $0 || NP/N']),
        ('an', ['lambda $0.det:art|a $0 || NP/N']),
        ('another', ['lambda $0.qn|another $0 || NP/N']),
        ('are', ['lambda $0.lambda $1.v|equals $0 $1 || S\\NP/NP','lambda $0.lambda $1.v|hasproperty $1 $0 || S\\NP/NP']),
        ('break', ['lambda $0.lambda $1.v|break $1 $0 || S\\NP/NP']),
        ('can', ['lambda $0.lambda $1.mod|can ($0 $1) || S\\NP/(S\\NP)','lambda $0.lambda $1.mod|can ($0 $1) || S/NP/(S\\NP)']),
        ('d', ['lambda $0.lambda $1.mod|do ($0 $1) || S\\NP/(S\\NP)','lambda $0.lambda $1.mod|do ($0 $1) || S/NP/(S\\NP)']), #?
        ('did', ['lambda $0.lambda $1.mod|do-past ($0 $1) || S/NP','lambda $0.lambda $1.mod|do-past ($0 $1) || S/NP/(S\\NP)']),
        ('do', ['lambda $0.lambda $1.v|do $1 $0 || S\\NP/NP','lambda $0.lambda $1.mod|do ($0 $1) || S/NP/(S\\NP)']),
        ('does', ['lambda $0.lambda $1.mod|do-3s ($1 $0) || S\\NP/(S\\NP)','lambda $0.lambda $1.mod|do-3s ($0 $1) || S/NP/(S\\NP)']), #?
        ('dropped', ['lambda $0.lambda $1.v|drop-past $1 $0 || S\\NP/NP']),
        ('have', ['lambda $0.lambda $1.v|have $1 $0 || S\\NP/NP']),
        ('he', ['pro:sub|he || NP']),
        ('his', ['lambda $0.det:poss|his $0 || NP/N','pro:poss|his || NP']),
        ('hurt', ['lambda $0.lambda $1.v|hurt-zero $1 $0 || S\\NP/NP']),
        ('in', ['lambda $0.lambda $1.prep|in ($1 $0) || S\\NP\\(S\\NP)/NP','lambda $0.prep|in $0 || S/S']), #?
        ('is', ['lambda $0.lambda $1.v|equals $0 $1 || S\\NP/NP','lambda $0.lambda $1.v|hasproperty $1 $0 || S\\NP/NP']),
        ('it', ['pro:per|it || NP']),
        ('like', ['lambda $0.lambda $1.v|like $1 $0 || S\\NP/NP']),
        ('lost', ['lambda $0.lambda $1.v|lose-past $1 $0 || S\\NP/NP']),
        ('may', ['lambda $0.lambda $1.mod|may ($0 $1) || S\\NP/(S\\NP)']),
        ('missed', ['lambda $0.v|miss-past $0 || S\\NP','lambda $0.lambda $1.v|miss-past $1 $0 || S\\NP/NP']),
        ('my', ['lambda $0.det:poss|my $0 || NP/N']),
        ('name', ['n|name || N']),
        ('need', ['lambda $0.lambda $1.v|need $1 $0 || S\\NP/NP']),
        ('no', ['lambda $0.qn|no $0 || NP/N']),
        ('not', ['lambda $0.lambda $1.not ($0 $1) || S\\NP/(S\\NP)\\(S\\NP/(S\\NP))']), #?
        ('on', ['lambda $0.prep|on $0 || S\\NP\\(S\\NP)/NP']),
        ('one', ['pro:indef|one || NP']),
        ('pencil', ['n|pencil || N']),
        ('say', ['lambda $0.lambda $1.v|say $1 $0 || S\\NP/NP']),
        ('see', ['lambda $0.lambda $1.v|see $1 $0 || S\\NP/NP']),
        ('shall', ['lambda $0.lambda $1.mod|shall ($0 $1) || S\\NP/(S\\NP)']),
        ('some', ['lambda $0.qn|some $0 || NP/N']),
        ('that', ['pro:dem|that || NP','lambda $0.pro:det|that $0 || NP/N']),
        ('the', ['lambda $0.det:art|the $0 || NP/N']),
        ('they', ['pro:sub|they || NP']),
        ('this', ['pro:dem|this || NP','lambda $0.pro:det|this $0 || NP/N']),
        ('those', ['pro:dem|those || NP','lambda $0.pro:det|those $0 || NP/N']),
        ('was', ['lambda $0.lambda $1.v|equals $0 $1 || S\\NP/NP','lambda $0.lambda $1.v|hasproperty $1 $0 || S\\NP/NP']),
        ('we', ['pro:sub|we || NP']),
        ('what', ['pro:int|WHAT || Swhq/Sq/NP','pro:int|WHAT || NP']),
        ('who', ['pro:int|WHO || Swhq/Sq/NP','pro:int|WHO || NP']),
        ('you', ['pro:per|you || NP']),
        ('your', ['lambda $0.det:poss|your $0 || NP/N'])]

hgt_lexicon = [
        ('naḳōn', ['adv|naḳōn || S',]),
        ('ze', ['lambda $0.v|hasproperty pro:dem|ze $0 || NP',]),
        ('ʔat', ['pro:per|ʔat || NP',]),
        ('ken', ['adv|ken || S',]),
        ('ha', ['lambda $0.det|ha $0 || NP/N',]),
        ('huʔ', ['pro:per|huʔ || NP',]),
        ('loʔ', ['lambda $0.lambda $1.not ($0 $1) || S\\NP/(S\\NP)\\(S\\NP/(S\\NP))',]),
        ('bōʔi', ['v|baʔ you || S',]),
        ('rocā', ['lambda $0.lambda $1.v|racā $1 $0 || S\\NP/NP',]),
        ('ʔanī', ['pro:per|ʔanī || NP',]),
        ('ʔābaʔ', ['n:prop|ʔābaʔ || NP',]),
        ('qxi', ['v|laqāx you || S',]),
        ('ʕod', ['lambda $0.qn|ʕod $0 || NP/N',]),
        ('ṭaʕīm', ['adj|ṭaʕīm || S',]),
        ('roʔā', ['lambda $0.v|raʔā $0 || S\\NP',]),
        ('tistaklī', ['v|histakēl you || S',]),
        ('le', ['lambda $0.prep|le $0 || S\\NP',]),
        ('hiʔ', ['pro:per|hiʔ || NP',]),
        ('gamārnu', ['v|gamār you || S',]),
        ('hem', ['pro:per|hem || NP',]),
        ('nafāl', ['lambda $0.v|nafāl $0 || S\\NP',]),
        ('texapṣī', ['v|xipēṣ you || S',]),
        ('kaxōl', ['adj|kaxōl || S',]),
        ('zoʔt', ['pro:dem|zoʔt || NP',]),
        ('lehitraʔōt', ['v|hitraʔā you || S',]),
        ('tirʔī', ['v|raʔā you || S',]),
        ('beṭuxā', ['lambda $0.v|hasproperty $0 adj|baṭūax || S\\NP',]),
        ('qar', ['adj|qar || S',]),
        ('ʔīmaʔ', ['n:prop|ʔīmaʔ || NP',]),
        ('ʔōqer', ['adj|ʔōqer || S',]),
        ('halāḳ', ['lambda $0.v|halāḳ $0 || S\\NP',]),
        ('glīda', ['n|glīda || N','n|glīda-BARE || NP',]),
        ('xam', ['adj|xam || S',]),
        ('ʔeyn', ['v|ʔeyn you || S\\NP',]),
        ('boḳē', ['lambda $0.v|baḳā $0 || S\\NP',]),
        ('yaldā', ['n|yēled || N','n|yēled-BARE || NP',]),
        ('gvinā', ['n|gvinā || N','n|gvinā-BARE || NP']),
        ('tisperī', ['v|safār you || S',]),
        ('tarnegōl', ['n|tarnegōl || N','n|tarnegōl-BARE || NP',]),
        ('yeš', ['lambda $0.v|yeš $0 || S\\NP',]),
        ('ʔavāl', ['lambda $0.lambda $1.v|hasproperty $0 $1 || S\\NP/NP',]),
        ('ʔor', ['n|ʔor-BARE || NP',]),
        ('ricpā', ['n|ricpā || N','n|ricpā-BARE || NP']),
        ('yēled', ['adj|yēled || N/N',]),
        ('ʕal', ['lambda $0.prep|ʕal $0 || S\\NP',]),
        ('ʔadōm', ['adj|ʔadōm || S',]),
        ('tagīdi', ['v|higīd you || S',]),
        ('tašīri', ['v|šar you || S',]),
        ('cahōv', ['adj|cahōv || S',]),
        ('šalōm', ['n|šalōm || N','n|šalōm-BARE || NP']),
        ]

all_gt_lexicons = {'adam': agt_lexicon, 'hagar': hgt_lexicon}
